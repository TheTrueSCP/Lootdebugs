package net.the_goldbeards.lootdebugs.Block.Drinks;

import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.LevelAccessor;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.BlockStateProperties;
import net.minecraft.world.level.block.state.properties.BooleanProperty;
import net.minecraft.world.level.block.state.properties.DirectionProperty;
import net.minecraft.world.level.material.FluidState;
import net.minecraft.world.level.material.Fluids;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;
import net.the_goldbeards.lootdebugs.util.ModTags;
import org.jetbrains.annotations.Nullable;

public class MugBlock extends BushBlock implements SimpleWaterloggedBlock{

    public static final BooleanProperty WATERLOGGED = BlockStateProperties.WATERLOGGED;
    public MugBlock(Properties properties) {
        super(properties);
        this.registerDefaultState(this.stateDefinition.any().setValue(WATERLOGGED, Boolean.valueOf(false)));

    }

//VoxelShape
private static final DirectionProperty FACING = HorizontalDirectionalBlock.FACING;

    private static final VoxelShape SHAPE_N = Shapes.or(
            Block.box(2.0658363597032388, 3.17, 7.5, 3.1658363597032384, 5.92, 8.5),
            Block.box(2.3251819020988798, -0.5144678516312224, 7.5, 3.4251819020988794, 1.4855321483687778, 8.5),
            Block.box(4.113836359703239, 0.613, 7.49, 6.113836359703239, 1.713, 8.51),
            Block.box(2.7809989635530226, -0.5154802822384112, 7.49, 5.280998963553023, 0.5845197177615888, 8.51),
            Block.box(2.7138363597032384, 5.55, 7.48, 5.063836359703238, 6.55, 8.52),
            Block.box(0.2096575907404734, 3.454755079157408, 7.49, 2.2096575907404734, 4.454755079157408, 8.51),
            Block.box(4.908041131861104, 0, 6.623877047990515, 5.908041131861104, 7, 8.623877047990515),
            Block.box(9.908041131861104, 0, 6.623877047990515, 10.908041131861104, 7, 8.623877047990515),
            Block.box(6.908041131861104, 0, 9.623877047990515, 8.908041131861104, 7, 10.623877047990515),
            Block.box(6.908041131861104, 0, 4.623877047990515, 8.908041131861104, 7, 5.623877047990515),
            Block.box(7.063836359703238, 0, 10, 9.063836359703238, 7, 11),
            Block.box(7.063836359703238, 0, 5, 9.063836359703238, 7, 6),
            Block.box(10.063836359703238, 0, 7, 11.063836359703238, 7, 9),
            Block.box(5.063836359703238, 0, 7, 6.063836359703238, 7, 9),
            Block.box(6.063836359703238, 0.10000000000000009, 6, 10.063836359703238, 1.1, 10),
            Block.box(4.708041131861105, 4.15, 7.2761229520094854, 5.708041131861105, 5.35, 9.476122952009485),
            Block.box(4.863836359703239, 4.15, 6.9, 5.863836359703239, 5.35, 9.1),
            Block.box(4.863836359703239, 1.75, 6.9, 5.863836359703239, 2.95, 9.1),
            Block.box(4.708041131861105, 1.75, 7.2761229520094854, 5.708041131861105, 2.95, 9.476122952009485),
            Block.box(6.963836359703238, 1.75, 10.2, 9.163836359703238, 2.95, 11.2),
            Block.box(6.963836359703238, 4.15, 10.2, 9.163836359703238, 5.35, 11.2),
            Block.box(10.108041131861103, 4.15, 6.523877047990515, 11.108041131861103, 5.35, 8.723877047990515),
            Block.box(10.108041131861103, 1.75, 6.523877047990515, 11.108041131861103, 2.95, 8.723877047990515),
            Block.box(10.263836359703237, 1.75, 6.9, 11.263836359703237, 2.95, 9.1),
            Block.box(10.263836359703237, 4.15, 6.9, 11.263836359703237, 5.35, 9.1),
            Block.box(10.108041131861103, 4.15, 7.2761229520094854, 11.108041131861103, 5.35, 9.476122952009485),
            Block.box(10.108041131861103, 1.75, 7.2761229520094854, 11.108041131861103, 2.95, 9.476122952009485),
            Block.box(6.963836359703238, 1.75, 4.800000000000001, 9.163836359703238, 2.95, 5.800000000000001),
            Block.box(4.708041131861105, 4.15, 6.523877047990515, 5.708041131861105, 5.35, 8.723877047990515),
            Block.box(4.708041131861105, 1.75, 6.523877047990515, 5.708041131861105, 2.95, 8.723877047990515),
            Block.box(6.963836359703238, 4.15, 4.800000000000001, 9.163836359703238, 5.35, 5.800000000000001),
            Block.box(7.563836359703238, 4.25, 4.65, 8.563836359703238, 5.25, 5.65),
            Block.box(7.563836359703238, 1.85, 4.65, 8.563836359703238, 2.85, 5.65),
            Block.box(10.258041131861104, 1.85, 7.876122952009485, 11.258041131861104, 2.85, 8.876122952009485),
            Block.box(4.5580411318611045, 4.249999999999999, 7.123877047990515, 5.5580411318611045, 5.249999999999999, 8.123877047990515),
            Block.box(4.5580411318611045, 1.85, 7.123877047990515, 5.5580411318611045, 2.85, 8.123877047990515),
            Block.box(4.713836359703238, 1.85, 7.5, 5.713836359703238, 2.85, 8.5),
            Block.box(4.713836359703238, 4.25, 7.5, 5.713836359703238, 5.25, 8.5),
            Block.box(7.408041131861104, 1.85, 9.973877047990515, 8.408041131861104, 2.85, 10.973877047990515),
            Block.box(7.408041131861104, 4.249999999999999, 9.973877047990515, 8.408041131861104, 5.249999999999999, 10.973877047990515),
            Block.box(7.563836359703238, 4.25, 10.35, 8.563836359703238, 5.25, 11.35),
            Block.box(7.563836359703238, 1.85, 10.35, 8.563836359703238, 2.85, 11.35),
            Block.box(10.258041131861104, 1.85, 7.123877047990515, 11.258041131861104, 2.85, 8.123877047990515),
            Block.box(10.258041131861104, 4.249999999999999, 7.123877047990515, 11.258041131861104, 5.249999999999999, 8.123877047990515),
            Block.box(10.413836359703238, 4.25, 7.5, 11.413836359703238, 5.25, 8.5),
            Block.box(10.413836359703238, 1.85, 7.5, 11.413836359703238, 2.85, 8.5),
            Block.box(10.258041131861104, 4.249999999999999, 7.876122952009485, 11.258041131861104, 5.249999999999999, 8.876122952009485),
            Block.box(6.963836359703238, -0.55, 4.800000000000001, 9.163836359703238, 0.45, 5.800000000000001),
            Block.box(10.108041131861103, -0.55, 7.2761229520094854, 11.108041131861103, 0.45, 9.476122952009485),
            Block.box(10.263836359703237, -0.55, 6.9, 11.263836359703237, 0.45, 9.1),
            Block.box(4.708041131861105, -0.55, 6.523877047990515, 5.708041131861105, 0.45, 8.723877047990515),
            Block.box(4.863836359703239, -0.55, 6.9, 5.863836359703239, 0.45, 9.1),
            Block.box(4.708041131861105, -0.55, 7.2761229520094854, 5.708041131861105, 0.45, 9.476122952009485),
            Block.box(6.963836359703238, -0.55, 10.2, 9.163836359703238, 0.45, 11.2),
            Block.box(10.108041131861103, -0.55, 6.523877047990515, 11.108041131861103, 0.45, 8.723877047990515)
    );


    private static final VoxelShape SHAPE_E = Shapes.or(
            Block.box(7, 0.9000000000000004, 3, 9, 5.9, 4),
            Block.box(6.9, 0.9, 2.9000000000000004, 9.1, 2, 5.9),
            Block.box(6.9, 5, 3, 9.1, 6, 6),
            Block.box(6.799999999999999, 5, 1, 9.2, 6, 4),
            Block.box(7, 0, 5, 9, 7, 6),
            Block.box(7, 0, 10, 9, 7, 11),
            Block.box(5, 0, 7, 6, 7, 9),
            Block.box(10, 0, 7, 11, 7, 9),
            Block.box(5, 0, 7, 6, 7, 9),
            Block.box(10, 0, 7, 11, 7, 9),
            Block.box(7, 0, 10, 9, 7, 11),
            Block.box(7, 0, 5, 9, 7, 6),
            Block.box(6, 0.1, 6, 10, 1.1, 10),
            Block.box(10.2, 4.5, 6.9, 11.2, 5.5, 9.100000000000001),
            Block.box(10.2, 2, 6.9, 11.2, 3, 9.100000000000001),
            Block.box(10.2, 0, 6.9, 11.2, 1, 9.100000000000001),
            Block.box(4.800000000000001, 0, 6.9, 5.800000000000001, 1, 9.100000000000001),
            Block.box(4.800000000000001, 2, 6.9, 5.800000000000001, 3, 9.100000000000001),
            Block.box(4.800000000000001, 4.5, 6.9, 5.800000000000001, 5.5, 9.100000000000001),
            Block.box(6.9, 4.5, 10.2, 9.1, 5.5, 11.2),
            Block.box(6.9, 2, 10.2, 9.1, 3, 11.2),
            Block.box(6.9, 0, 10.2, 9.1, 1, 11.2),
            Block.box(6.9, 0, 4.800000000000001, 9.1, 1, 5.800000000000001),
            Block.box(6.9, 2, 4.800000000000001, 9.1, 3, 5.800000000000001),
            Block.box(6.9, 4.5, 4.800000000000001, 9.1, 5.5, 5.800000000000001),
            Block.box(6.9, 4.5, 10.2, 9.1, 5.5, 11.2),
            Block.box(6.9, 2, 10.2, 9.1, 3, 11.2),
            Block.box(6.9, 0, 10.2, 9.1, 1, 11.2),
            Block.box(6.9, 0, 4.800000000000001, 9.1, 1, 5.800000000000001),
            Block.box(6.9, 2, 4.800000000000001, 9.1, 3, 5.800000000000001),
            Block.box(7, 4.5, 4.800000000000001, 9, 5.5, 5.800000000000001),
            Block.box(6.9, 4.5, 10.2, 9.1, 5.5, 11.2),
            Block.box(6.9, 2, 10.2, 9.1, 3, 11.2),
            Block.box(6.9, 0, 10.2, 9.1, 1, 11.2),
            Block.box(6.9, 0, 4.800000000000001, 9.1, 1, 5.800000000000001),
            Block.box(6.9, 2, 4.800000000000001, 9.1, 3, 5.800000000000001),
            Block.box(6.9, 4.5, 4.800000000000001, 9.1, 5.5, 5.800000000000001)
    );


    private static final VoxelShape SHAPE_S = Shapes.or(
            Block.box(12.898, 3.17, 7.5, 13.998, 5.92, 8.5),
            Block.box(13.361, 1.4965, 7.5, 14.461, 3.4965, 8.5),
            Block.box(9.95, 0.613, 7.49, 11.95, 1.713, 8.51),
            Block.box(11.85, 1.189, 7.49, 14.35, 2.289, 8.51),
            Block.box(11, 5.55, 7.48, 13.35, 6.55, 8.52),
            Block.box(13, 5.8, 7.49, 15, 6.8, 8.51),
            Block.box(10, 0, 7, 11, 7, 9),
            Block.box(5, 0, 7, 6, 7, 9),
            Block.box(7, 0, 5, 9, 7, 6),
            Block.box(7, 0, 10, 9, 7, 11),
            Block.box(7, 0, 5, 9, 7, 6),
            Block.box(7, 0, 10, 9, 7, 11),
            Block.box(5, 0, 7, 6, 7, 9),
            Block.box(10, 0, 7, 11, 7, 9),
            Block.box(6, 0.1, 6, 10, 1.1, 10),
            Block.box(10.2, 4.15, 6.9, 11.2, 5.35, 9.1),
            Block.box(10.2, 4.15, 6.9, 11.2, 5.35, 9.1),
            Block.box(10.2, 1.75, 6.9, 11.2, 2.95, 9.1),
            Block.box(10.2, 1.75, 6.9, 11.2, 2.95, 9.1),
            Block.box(6.9, 1.75, 4.8, 9.1, 2.95, 5.8),
            Block.box(6.9, 4.15, 4.8, 9.1, 5.35, 5.8),
            Block.box(4.8, 4.15, 6.9, 5.8, 5.35, 9.1),
            Block.box(4.8, 1.75, 6.9, 5.8, 2.95, 9.1),
            Block.box(4.8, 1.75, 6.9, 5.8, 2.95, 9.1),
            Block.box(4.8, 4.15, 6.9, 5.8, 5.35, 9.1),
            Block.box(4.8, 4.15, 6.9, 5.8, 5.35, 9.1),
            Block.box(4.8, 1.75, 6.9, 5.8, 2.95, 9.1),
            Block.box(6.9, 1.75, 10.2, 9.1, 2.95, 11.2),
            Block.box(10.2, 4.15, 6.9, 11.2, 5.35, 9.1),
            Block.box(10.2, 1.75, 6.9, 11.2, 2.95, 9.1),
            Block.box(6.9, 4.15, 10.2, 9.1, 5.35, 11.2),
            Block.box(7.5, 4.25, 10.35, 8.5, 5.25, 11.35),
            Block.box(7.5, 1.85, 10.35, 8.5, 2.85, 11.35),
            Block.box(4.65, 1.85, 7.5, 5.65, 2.85, 8.5),
            Block.box(10.35, 4.25, 7.5, 11.35, 5.25, 8.5),
            Block.box(10.35, 1.85, 7.5, 11.35, 2.85, 8.5),
            Block.box(10.35, 1.85, 7.5, 11.35, 2.85, 8.5),
            Block.box(10.35, 4.25, 7.5, 11.35, 5.25, 8.5),
            Block.box(7.5, 1.85, 4.65, 8.5, 2.85, 5.65),
            Block.box(7.5, 4.25, 4.65, 8.5, 5.25, 5.65),
            Block.box(7.5, 4.25, 4.65, 8.5, 5.25, 5.65),
            Block.box(7.5, 1.85, 4.65, 8.5, 2.85, 5.65),
            Block.box(4.65, 1.85, 7.5, 5.65, 2.85, 8.5),
            Block.box(4.65, 4.25, 7.5, 5.65, 5.25, 8.5),
            Block.box(4.65, 4.25, 7.5, 5.65, 5.25, 8.5),
            Block.box(4.65, 1.85, 7.5, 5.65, 2.85, 8.5),
            Block.box(4.65, 4.25, 7.5, 5.65, 5.25, 8.5),
            Block.box(6.9, -0.55, 10.2, 9.1, 0.45, 11.2),
            Block.box(4.8, -0.55, 6.9, 5.8, 0.45, 9.1),
            Block.box(4.8, -0.55, 6.9, 5.8, 0.45, 9.1),
            Block.box(10.2, -0.55, 6.9, 11.2, 0.45, 9.1),
            Block.box(10.2, -0.55, 6.9, 11.2, 0.45, 9.1),
            Block.box(10.2, -0.55, 6.9, 11.2, 0.45, 9.1),
            Block.box(6.9, -0.55, 4.8, 9.1, 0.45, 5.8),
            Block.box(4.8, -0.55, 6.9, 5.8, 0.45, 9.1)
    );

     private static final VoxelShape SHAPE_W = Shapes.or(
             Block.box(8.031918179851619, 3.17, 12.36608182014838, 9.031918179851619, 5.92, 13.46608182014838),
             Block.box(8.031918179851619, -0.5144678516312224, 12.10673627775274, 9.031918179851619, 1.4855321483687778, 13.20673627775274),
             Block.box(8.02191817985162, 0.613, 9.41808182014838, 9.041918179851619, 1.713, 11.41808182014838),
             Block.box(8.02191817985162, -0.5154802822384112, 10.250919216298596, 9.041918179851619, 0.5845197177615888, 12.750919216298596),
             Block.box(8.01191817985162, 5.55, 10.468081820148381, 9.051918179851619, 6.55, 12.81808182014838),
             Block.box(8.02191817985162, 3.454755079157408, 13.322260589111146, 9.041918179851619, 4.454755079157408, 15.322260589111146),
             Block.box(7.155795227842134, 0, 9.623877047990515, 9.155795227842134, 7, 10.623877047990515),
             Block.box(7.155795227842134, 0, 4.623877047990515, 9.155795227842134, 7, 5.623877047990515),
             Block.box(10.155795227842134, 0, 6.623877047990515, 11.155795227842134, 7, 8.623877047990515),
             Block.box(5.155795227842134, 0, 6.623877047990515, 6.155795227842134, 7, 8.623877047990515),
             Block.box(10.531918179851619, 0, 6.468081820148381, 11.531918179851619, 7, 8.468081820148381),
             Block.box(5.531918179851619, 0, 6.468081820148381, 6.531918179851619, 7, 8.468081820148381),
             Block.box(7.531918179851619, 0, 4.468081820148381, 9.531918179851619, 7, 5.468081820148381),
             Block.box(7.531918179851619, 0, 9.468081820148381, 9.531918179851619, 7, 10.468081820148381),
             Block.box(6.531918179851619, 0.10000000000000009, 5.468081820148381, 10.531918179851619, 1.1, 9.468081820148381),
             Block.box(7.8080411318611045, 4.15, 9.823877047990514, 10.008041131861104, 5.35, 10.823877047990514),
             Block.box(7.431918179851619, 4.15, 9.66808182014838, 9.631918179851619, 5.35, 10.66808182014838),
             Block.box(7.431918179851619, 1.75, 9.66808182014838, 9.631918179851619, 2.95, 10.66808182014838),
             Block.box(7.8080411318611045, 1.75, 9.823877047990514, 10.008041131861104, 2.95, 10.823877047990514),
             Block.box(10.731918179851618, 1.75, 6.368081820148381, 11.731918179851618, 2.95, 8.56808182014838),
             Block.box(10.731918179851618, 4.15, 6.368081820148381, 11.731918179851618, 5.35, 8.56808182014838),
             Block.box(7.055795227842134, 4.15, 4.423877047990515, 9.255795227842134, 5.35, 5.423877047990515),
             Block.box(7.055795227842134, 1.75, 4.423877047990515, 9.255795227842134, 2.95, 5.423877047990515),
             Block.box(7.431918179851619, 1.75, 4.268081820148381, 9.631918179851619, 2.95, 5.268081820148381),
             Block.box(7.431918179851619, 4.15, 4.268081820148381, 9.631918179851619, 5.35, 5.268081820148381),
             Block.box(7.8080411318611045, 4.15, 4.423877047990515, 10.008041131861104, 5.35, 5.423877047990515),
             Block.box(7.8080411318611045, 1.75, 4.423877047990515, 10.008041131861104, 2.95, 5.423877047990515),
             Block.box(5.33191817985162, 1.75, 6.368081820148381, 6.33191817985162, 2.95, 8.56808182014838),
             Block.box(7.055795227842134, 4.15, 9.823877047990514, 9.255795227842134, 5.35, 10.823877047990514),
             Block.box(7.055795227842134, 1.75, 9.823877047990514, 9.255795227842134, 2.95, 10.823877047990514),
             Block.box(5.33191817985162, 4.15, 6.368081820148381, 6.33191817985162, 5.35, 8.56808182014838),
             Block.box(5.181918179851619, 4.25, 6.968081820148381, 6.181918179851619, 5.25, 7.968081820148381),
             Block.box(5.181918179851619, 1.85, 6.968081820148381, 6.181918179851619, 2.85, 7.968081820148381),
             Block.box(8.408041131861104, 1.85, 4.273877047990515, 9.408041131861104, 2.85, 5.273877047990515),
             Block.box(7.655795227842134, 4.249999999999999, 9.973877047990515, 8.655795227842134, 5.249999999999999, 10.973877047990515),
             Block.box(7.655795227842134, 1.85, 9.973877047990515, 8.655795227842134, 2.85, 10.973877047990515),
             Block.box(8.031918179851619, 1.85, 9.81808182014838, 9.031918179851619, 2.85, 10.81808182014838),
             Block.box(8.031918179851619, 4.25, 9.81808182014838, 9.031918179851619, 5.25, 10.81808182014838),
             Block.box(10.505795227842134, 1.85, 7.123877047990515, 11.505795227842134, 2.85, 8.123877047990515),
             Block.box(10.505795227842134, 4.249999999999999, 7.123877047990515, 11.505795227842134, 5.249999999999999, 8.123877047990515),
             Block.box(10.881918179851619, 4.25, 6.968081820148381, 11.881918179851619, 5.25, 7.968081820148381),
             Block.box(10.881918179851619, 1.85, 6.968081820148381, 11.881918179851619, 2.85, 7.968081820148381),
             Block.box(7.655795227842134, 1.85, 4.273877047990515, 8.655795227842134, 2.85, 5.273877047990515),
             Block.box(7.655795227842134, 4.249999999999999, 4.273877047990515, 8.655795227842134, 5.249999999999999, 5.273877047990515),
             Block.box(8.031918179851619, 4.25, 4.118081820148381, 9.031918179851619, 5.25, 5.118081820148381),
             Block.box(8.031918179851619, 1.85, 4.118081820148381, 9.031918179851619, 2.85, 5.118081820148381),
             Block.box(8.408041131861104, 4.249999999999999, 4.273877047990515, 9.408041131861104, 5.249999999999999, 5.273877047990515),
             Block.box(5.33191817985162, -0.55, 6.368081820148381, 6.33191817985162, 0.45, 8.56808182014838),
             Block.box(7.8080411318611045, -0.55, 4.423877047990515, 10.008041131861104, 0.45, 5.423877047990515),
             Block.box(7.431918179851619, -0.55, 4.268081820148381, 9.631918179851619, 0.45, 5.268081820148381),
             Block.box(7.055795227842134, -0.55, 9.823877047990514, 9.255795227842134, 0.45, 10.823877047990514),
             Block.box(7.431918179851619, -0.55, 9.66808182014838, 9.631918179851619, 0.45, 10.66808182014838),
             Block.box(7.8080411318611045, -0.55, 9.823877047990514, 10.008041131861104, 0.45, 10.823877047990514),
             Block.box(10.731918179851618, -0.55, 6.368081820148381, 11.731918179851618, 0.45, 8.56808182014838),
             Block.box(7.055795227842134, -0.55, 4.423877047990515, 9.255795227842134, 0.45, 5.423877047990515)
     );





    @Override
    public VoxelShape getShape(BlockState state, BlockGetter p_60556_, BlockPos p_60557_, CollisionContext p_60558_) {
        switch (state.getValue(FACING))
        {
            case NORTH:
                return SHAPE_N;

            case EAST:
                return SHAPE_E;

            case WEST:
                return SHAPE_W;

            case SOUTH:
                return SHAPE_S;

            default:
                return SHAPE_N;
        }
    }


    @Nullable
    @Override
    public BlockState getStateForPlacement(BlockPlaceContext context) {
        return this.defaultBlockState().setValue(FACING,context.getHorizontalDirection().getOpposite());
    }

    @Override
    public BlockState rotate(BlockState state, LevelAccessor world, BlockPos pos, Rotation rot) {
        return state.setValue(FACING, rot.rotate(state.getValue(FACING)));
    }

    @Override
    public BlockState mirror(BlockState state, Mirror mirrorIn) {
        return state.rotate(mirrorIn.getRotation(state.getValue(FACING)));
    }

    @Override
    protected boolean mayPlaceOn(BlockState pState, BlockGetter pLevel, BlockPos pPos) {
        return !pState.is(ModTags.Blocks.BEER_CAN_PLACE_ON);
    }

    //Waterlog
    @Override
    public BlockState updateShape(BlockState stateIn, Direction facing, BlockState facingState, LevelAccessor worldIn, BlockPos currentPos, BlockPos facingPos) {
        if (stateIn.getValue(WATERLOGGED)) {
            worldIn.scheduleTick(currentPos, Fluids.WATER, Fluids.WATER.getTickDelay(worldIn));
        }
        return super.updateShape(stateIn, facing, facingState, worldIn, currentPos, facingPos);
    }

    @Override
    public FluidState getFluidState(BlockState state) {
        return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
    }

    @Override
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
        builder.add(FACING, WATERLOGGED);
    }

}
