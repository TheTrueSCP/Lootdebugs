package net.the_goldbeards.lootdebugs.Block.Drinks;


import net.minecraft.core.BlockPos;
import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.LevelAccessor;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.DirectionProperty;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;
import net.the_goldbeards.lootdebugs.util.ModTags;

import javax.annotation.Nullable;

public class ArkenStoutBlock extends BushBlock {


    public ArkenStoutBlock(Properties properties) {
        super(properties);


    }



    private static final DirectionProperty FACING = HorizontalDirectionalBlock.FACING;

    private static final VoxelShape SHAPE_N = Shapes.or(
             Block.box(1.2456421052631583, 3.25, 7.521957894736843, 3.4956421052631583, 5.25, 8.521957894736843),
             Block.box(0.9956421052631583, 1.25, 7.521957894736843, 3.2456421052631583, 3.25, 8.521957894736843),
             Block.box(1.2456421052631583, 0.25, 7.271957894736843, 3.4956421052631583, 1.25, 8.771957894736843),
             Block.box(2.9956421052631583, 5.5, 6.921957894736844, 5.745642105263158, 6.5, 9.121957894736843),
             Block.box(0.9956421052631583, 5.25, 7.171957894736844, 3.7456421052631583, 6.25, 8.871957894736843),
             Block.box(5.005698654468482, 0, 7.028692692569882, 6.005698654468482, 7, 9.028692692569882),
             Block.box(10.00569865446848, 0, 7.028692692569882, 11.00569865446848, 7, 9.028692692569882),
             Block.box(7.005698654468482, 0, 10.028692692569882, 9.005698654468482, 7, 11.028692692569882),
             Block.box(7.005698654468482, 0, 5.028692692569882, 9.005698654468482, 7, 6.028692692569882),
             Block.box(6.995642105263158, 0, 10.021957894736843, 8.995642105263158, 7, 11.021957894736843),
             Block.box(6.995642105263158, 0, 5.021957894736843, 8.995642105263158, 7, 6.021957894736843),
             Block.box(9.995642105263158, 0, 7.021957894736843, 10.995642105263158, 7, 9.021957894736843),
             Block.box(4.995642105263158, 0, 7.021957894736843, 5.995642105263158, 7, 9.021957894736843),
             Block.box(6.745642105263158, 5.25, 4.771957894736843, 9.245642105263158, 6.25, 5.771957894736843),
             Block.box(6.745642105263158, 3.75, 4.771957894736843, 9.245642105263158, 4.75, 5.771957894736843),
             Block.box(6.745642105263158, 2.25, 4.771957894736843, 9.245642105263158, 3.25, 5.771957894736843),
             Block.box(6.745642105263158, 0.75, 4.771957894736843, 9.245642105263158, 1.75, 5.771957894736843),
             Block.box(6.755698654468482, 5.25, 4.778692692569882, 9.255698654468482, 6.25, 5.778692692569882),
             Block.box(6.755698654468482, 3.75, 4.778692692569882, 9.255698654468482, 4.75, 5.778692692569882),
             Block.box(6.755698654468482, 2.25, 4.778692692569882, 9.255698654468482, 3.25, 5.778692692569882),
             Block.box(6.755698654468482, 0.75, 4.778692692569882, 9.255698654468482, 1.75, 5.778692692569882),
             Block.box(10.25569865446848, 5.25, 6.778692692569882, 11.25569865446848, 6.25, 9.278692692569882),
             Block.box(10.25569865446848, 3.75, 6.778692692569882, 11.25569865446848, 4.75, 9.278692692569882),
             Block.box(10.25569865446848, 2.25, 6.778692692569882, 11.25569865446848, 3.25, 9.278692692569882),
             Block.box(10.25569865446848, 0.75, 6.778692692569882, 11.25569865446848, 1.75, 9.278692692569882),
             Block.box(10.245642105263158, 5.25, 6.771957894736843, 11.245642105263158, 6.25, 9.271957894736843),
             Block.box(10.245642105263158, 3.75, 6.771957894736843, 11.245642105263158, 4.75, 9.271957894736843),
             Block.box(10.245642105263158, 2.25, 6.771957894736843, 11.245642105263158, 3.25, 9.271957894736843),
             Block.box(10.245642105263158, 0.75, 6.771957894736843, 11.245642105263158, 1.75, 9.271957894736843),
             Block.box(6.743293272342401, 5.25, 4.760084619380761, 9.2432932723424, 6.25, 5.760084619380761),
             Block.box(6.743293272342401, 3.75, 4.760084619380761, 9.2432932723424, 4.75, 5.760084619380761),
             Block.box(6.743293272342401, 2.25, 4.760084619380761, 9.2432932723424, 3.25, 5.760084619380761),
             Block.box(6.743293272342401, 0.75, 4.760084619380761, 9.2432932723424, 1.75, 5.760084619380761),
             Block.box(4.745642105263158, 5.25, 6.771957894736843, 5.745642105263158, 6.25, 9.271957894736843),
             Block.box(4.745642105263158, 3.75, 6.771957894736843, 5.745642105263158, 4.75, 9.271957894736843),
             Block.box(4.745642105263158, 2.25, 6.771957894736843, 5.745642105263158, 3.25, 9.271957894736843),
             Block.box(4.745642105263158, 0.75, 6.771957894736843, 5.745642105263158, 1.75, 9.271957894736843),
             Block.box(4.743293272342401, 0.75, 6.760084619380763, 5.743293272342401, 1.75, 9.260084619380763),
             Block.box(4.743293272342401, 2.25, 6.760084619380763, 5.743293272342401, 3.25, 9.260084619380763),
             Block.box(4.743293272342401, 3.75, 6.760084619380763, 5.743293272342401, 4.75, 9.260084619380763),
             Block.box(4.743293272342401, 5.25, 6.760084619380763, 5.743293272342401, 6.25, 9.260084619380763),
             Block.box(6.745642105263158, 5.25, 10.271957894736843, 9.245642105263158, 6.25, 11.271957894736843),
             Block.box(6.745642105263158, 3.75, 10.271957894736843, 9.245642105263158, 4.75, 11.271957894736843),
             Block.box(6.745642105263158, 2.25, 10.271957894736843, 9.245642105263158, 3.25, 11.271957894736843),
             Block.box(6.745642105263158, 0.75, 10.271957894736843, 9.245642105263158, 1.75, 11.271957894736843),
             Block.box(10.995642105263158, 5, 7.271957894736843, 12.245642105263158, 6, 8.771957894736843),
             Block.box(10.995642105263158, 1, 7.271957894736843, 12.245642105263158, 2, 8.771957894736843),
             Block.box(10.995642105263158, 0.25, 7.521957894736843, 11.995642105263158, 1.25, 8.521957894736843),
             Block.box(10.995642105263158, 5.5, 7.521957894736843, 11.995642105263158, 6.5, 8.521957894736843),
             Block.box(10.995642105263158, 2, 7.521957894736843, 11.995642105263158, 5, 8.521957894736843),
             Block.box(11.120642105263158, 4.167354098419463, 6.963925030209543, 12.120642105263158, 5.167354098419463, 8.213925030209543),
             Block.box(11.120642105263158, 3.0125046827803548, 7.442279320665904, 12.120642105263158, 4.012504682780355, 8.692279320665904),
             Block.box(11.120642105263158, 1.8576552671412463, 7.920633611122266, 12.120642105263158, 2.8576552671412463, 9.170633611122266),
             Block.box(5.995642105263158, 0.10000000000000009, 6.021957894736843, 9.995642105263158, 1.1, 10.021957894736843),
             Block.box(4.995642105263158, 7, 6.021957894736843, 8.995642105263158, 9, 9.021957894736843),
             Block.box(5.995642105263158, 5, 5.021957894736843, 8.995642105263158, 8, 11.021957894736843),
             Block.box(5.995642105263158, 1, 6.021957894736843, 9.995642105263158, 8, 10.021957894736843)
    );

    private static final VoxelShape SHAPE_E = Shapes.or(
             Block.box(7.5, 3.25, 1.25, 8.5, 5.25, 3.5),
             Block.box(7.5, 1.25, 1, 8.5, 3.25, 3.25),
             Block.box(7.25, 0.25, 1.25, 8.75, 1.25, 3.5),
             Block.box(6.9, 5.5, 3, 9.1, 6.5, 5.75),
             Block.box(7.15, 5.25, 1, 8.85, 6.25, 3.75),
             Block.box(7, 0, 5, 9, 7, 6),
             Block.box(7, 0, 10, 9, 7, 11),
             Block.box(5, 0, 7, 6, 7, 9),
             Block.box(10, 0, 7, 11, 7, 9),
             Block.box(5, 0, 7, 6, 7, 9),
             Block.box(10, 0, 7, 11, 7, 9),
             Block.box(7, 0, 10, 9, 7, 11),
             Block.box(7, 0, 5, 9, 7, 6),
             Block.box(10.25, 5.25, 6.75, 11.25, 6.25, 9.25),
             Block.box(10.25, 3.75, 6.75, 11.25, 4.75, 9.25),
             Block.box(10.25, 2.25, 6.75, 11.25, 3.25, 9.25),
             Block.box(10.25, 0.75, 6.75, 11.25, 1.75, 9.25),
             Block.box(10.25, 5.25, 6.75, 11.25, 6.25, 9.25),
             Block.box(10.25, 3.75, 6.75, 11.25, 4.75, 9.25),
             Block.box(10.25, 2.25, 6.75, 11.25, 3.25, 9.25),
             Block.box(10.25, 0.75, 6.75, 11.25, 1.75, 9.25),
             Block.box(6.75, 5.25, 10.25, 9.25, 6.25, 11.25),
             Block.box(6.75, 3.75, 10.25, 9.25, 4.75, 11.25),
             Block.box(6.75, 2.25, 10.25, 9.25, 3.25, 11.25),
             Block.box(6.75, 0.75, 10.25, 9.25, 1.75, 11.25),
             Block.box(6.75, 5.25, 10.25, 9.25, 6.25, 11.25),
             Block.box(6.75, 3.75, 10.25, 9.25, 4.75, 11.25),
             Block.box(6.75, 2.25, 10.25, 9.25, 3.25, 11.25),
             Block.box(6.75, 0.75, 10.25, 9.25, 1.75, 11.25),
             Block.box(10.25, 5.25, 6.75, 11.25, 6.25, 9.25),
             Block.box(10.25, 3.75, 6.75, 11.25, 4.75, 9.25),
             Block.box(10.25, 2.25, 6.75, 11.25, 3.25, 9.25),
             Block.box(10.25, 0.75, 6.75, 11.25, 1.75, 9.25),
             Block.box(6.75, 5.25, 4.75, 9.25, 6.25, 5.75),
             Block.box(6.75, 3.75, 4.75, 9.25, 4.75, 5.75),
             Block.box(6.75, 2.25, 4.75, 9.25, 3.25, 5.75),
             Block.box(6.75, 0.75, 4.75, 9.25, 1.75, 5.75),
             Block.box(6.75, 0.75, 4.75, 9.25, 1.75, 5.75),
             Block.box(6.75, 2.25, 4.75, 9.25, 3.25, 5.75),
             Block.box(6.75, 3.75, 4.75, 9.25, 4.75, 5.75),
             Block.box(6.75, 5.25, 4.75, 9.25, 6.25, 5.75),
             Block.box(4.75, 5.25, 6.75, 5.75, 6.25, 9.25),
             Block.box(4.75, 3.75, 6.75, 5.75, 4.75, 9.25),
             Block.box(4.75, 2.25, 6.75, 5.75, 3.25, 9.25),
             Block.box(4.75, 0.75, 6.75, 5.75, 1.75, 9.25),
             Block.box(7.25, 5, 11, 8.75, 6, 12.25),
             Block.box(7.25, 1, 11, 8.75, 2, 12.25),
             Block.box(7.5, 0.25, 11, 8.5, 1.25, 12),
             Block.box(7.5, 5.5, 11, 8.5, 6.5, 12),
             Block.box(7.5, 2, 11, 8.5, 5, 12),
             Block.box(7.375, 4.25, 11.125, 8.625, 5.25, 12.125),
             Block.box(7.375, 3, 11.125, 8.625, 4, 12.125),
             Block.box(7.375, 1.75, 11.125, 8.625, 2.75, 12.125),
             Block.box(6, 0.1, 6, 10, 1.1, 10),
             Block.box(7, 7, 5, 10, 9, 9),
             Block.box(5, 5, 6, 11, 8, 9),
             Block.box(6, 1, 6, 10, 8, 10)
    );

    private static final VoxelShape SHAPE_S = Shapes.or(
             Block.box(12.5, 3.25, 7.5, 14.75, 5.25, 8.5),
             Block.box(12.75, 1.25, 7.5, 15, 3.25, 8.5),
             Block.box(12.5, 0.25, 7.25, 14.75, 1.25, 8.75),
             Block.box(10.25, 5.5, 6.9, 13, 6.5, 9.1),
             Block.box(12.25, 5.25, 7.15, 15, 6.25, 8.85),
             Block.box(10, 0, 7, 11, 7, 9),
             Block.box(5, 0, 7, 6, 7, 9),
             Block.box(7, 0, 5, 9, 7, 6),
             Block.box(7, 0, 10, 9, 7, 11),
             Block.box(7, 0, 5, 9, 7, 6),
             Block.box(7, 0, 10, 9, 7, 11),
             Block.box(5, 0, 7, 6, 7, 9),
             Block.box(10, 0, 7, 11, 7, 9),
             Block.box(6.75, 5.25, 10.25, 9.25, 6.25, 11.25),
             Block.box(6.75, 3.75, 10.25, 9.25, 4.75, 11.25),
             Block.box(6.75, 2.25, 10.25, 9.25, 3.25, 11.25),
             Block.box(6.75, 0.75, 10.25, 9.25, 1.75, 11.25),
             Block.box(6.75, 5.25, 10.25, 9.25, 6.25, 11.25),
             Block.box(6.75, 3.75, 10.25, 9.25, 4.75, 11.25),
             Block.box(6.75, 2.25, 10.25, 9.25, 3.25, 11.25),
             Block.box(6.75, 0.75, 10.25, 9.25, 1.75, 11.25),
             Block.box(4.75, 5.25, 6.75, 5.75, 6.25, 9.25),
             Block.box(4.75, 3.75, 6.75, 5.75, 4.75, 9.25),
             Block.box(4.75, 2.25, 6.75, 5.75, 3.25, 9.25),
             Block.box(4.75, 0.75, 6.75, 5.75, 1.75, 9.25),
             Block.box(4.75, 5.25, 6.75, 5.75, 6.25, 9.25),
             Block.box(4.75, 3.75, 6.75, 5.75, 4.75, 9.25),
             Block.box(4.75, 2.25, 6.75, 5.75, 3.25, 9.25),
             Block.box(4.75, 0.75, 6.75, 5.75, 1.75, 9.25),
             Block.box(6.75, 5.25, 10.25, 9.25, 6.25, 11.25),
             Block.box(6.75, 3.75, 10.25, 9.25, 4.75, 11.25),
             Block.box(6.75, 2.25, 10.25, 9.25, 3.25, 11.25),
             Block.box(6.75, 0.75, 10.25, 9.25, 1.75, 11.25),
             Block.box(10.25, 5.25, 6.75, 11.25, 6.25, 9.25),
             Block.box(10.25, 3.75, 6.75, 11.25, 4.75, 9.25),
             Block.box(10.25, 2.25, 6.75, 11.25, 3.25, 9.25),
             Block.box(10.25, 0.75, 6.75, 11.25, 1.75, 9.25),
             Block.box(10.25, 0.75, 6.75, 11.25, 1.75, 9.25),
             Block.box(10.25, 2.25, 6.75, 11.25, 3.25, 9.25),
             Block.box(10.25, 3.75, 6.75, 11.25, 4.75, 9.25),
             Block.box(10.25, 5.25, 6.75, 11.25, 6.25, 9.25),
             Block.box(6.75, 5.25, 4.75, 9.25, 6.25, 5.75),
             Block.box(6.75, 3.75, 4.75, 9.25, 4.75, 5.75),
             Block.box(6.75, 2.25, 4.75, 9.25, 3.25, 5.75),
             Block.box(6.75, 0.75, 4.75, 9.25, 1.75, 5.75),
             Block.box(3.75, 5, 7.25, 5, 6, 8.75),
             Block.box(3.75, 1, 7.25, 5, 2, 8.75),
             Block.box(4, 0.25, 7.5, 5, 1.25, 8.5),
             Block.box(4, 5.5, 7.5, 5, 6.5, 8.5),
             Block.box(4, 2, 7.5, 5, 5, 8.5),
             Block.box(3.875, 4.25, 7.375, 4.875, 5.25, 8.625),
             Block.box(3.875, 3, 7.375, 4.875, 4, 8.625),
             Block.box(3.875, 1.75, 7.375, 4.875, 2.75, 8.625),
             Block.box(6, 0.1, 6, 10, 1.1, 10),
             Block.box(7, 7, 7, 11, 9, 10),
             Block.box(7, 5, 5, 10, 8, 11),
             Block.box(6, 1, 6, 10, 8, 10)
    );




    private static final VoxelShape SHAPE_W = Shapes.or(
             Block.box(7.517600000000002, 3.25, 12.526315789473685, 8.517600000000002, 5.25, 14.776315789473685),
             Block.box(7.517600000000002, 1.25, 12.776315789473685, 8.517600000000002, 3.25, 15.026315789473685),
             Block.box(7.267600000000002, 0.25, 12.526315789473685, 8.767600000000002, 1.25, 14.776315789473685),
             Block.box(6.917600000000002, 5.5, 10.276315789473685, 9.117600000000001, 6.5, 13.026315789473685),
             Block.box(7.167600000000002, 5.25, 12.276315789473685, 8.867600000000001, 6.25, 15.026315789473685),
             Block.box(7.02433479783304, 0, 10.016259240268361, 9.02433479783304, 7, 11.016259240268361),
             Block.box(7.02433479783304, 0, 5.016259240268363, 9.02433479783304, 7, 6.016259240268363),
             Block.box(10.02433479783304, 0, 7.0162592402683615, 11.02433479783304, 7, 9.016259240268361),
             Block.box(5.02433479783304, 0, 7.0162592402683615, 6.02433479783304, 7, 9.016259240268361),
             Block.box(10.017600000000002, 0, 7.026315789473685, 11.017600000000002, 7, 9.026315789473685),
             Block.box(5.017600000000002, 0, 7.026315789473685, 6.017600000000002, 7, 9.026315789473685),
             Block.box(7.017600000000002, 0, 5.026315789473685, 9.017600000000002, 7, 6.026315789473685),
             Block.box(7.017600000000002, 0, 10.026315789473685, 9.017600000000002, 7, 11.026315789473685),
             Block.box(4.767600000000002, 5.25, 6.776315789473685, 5.767600000000002, 6.25, 9.276315789473685),
             Block.box(4.767600000000002, 3.75, 6.776315789473685, 5.767600000000002, 4.75, 9.276315789473685),
             Block.box(4.767600000000002, 2.25, 6.776315789473685, 5.767600000000002, 3.25, 9.276315789473685),
             Block.box(4.767600000000002, 0.75, 6.776315789473685, 5.767600000000002, 1.75, 9.276315789473685),
             Block.box(4.77433479783304, 5.25, 6.7662592402683615, 5.77433479783304, 6.25, 9.266259240268361),
             Block.box(4.77433479783304, 3.75, 6.7662592402683615, 5.77433479783304, 4.75, 9.266259240268361),
             Block.box(4.77433479783304, 2.25, 6.7662592402683615, 5.77433479783304, 3.25, 9.266259240268361),
             Block.box(4.77433479783304, 0.75, 6.7662592402683615, 5.77433479783304, 1.75, 9.266259240268361),
             Block.box(6.77433479783304, 5.25, 4.766259240268363, 9.27433479783304, 6.25, 5.766259240268363),
             Block.box(6.77433479783304, 3.75, 4.766259240268363, 9.27433479783304, 4.75, 5.766259240268363),
             Block.box(6.77433479783304, 2.25, 4.766259240268363, 9.27433479783304, 3.25, 5.766259240268363),
             Block.box(6.77433479783304, 0.75, 4.766259240268363, 9.27433479783304, 1.75, 5.766259240268363),
             Block.box(6.767600000000002, 5.25, 4.776315789473685, 9.267600000000002, 6.25, 5.776315789473685),
             Block.box(6.767600000000002, 3.75, 4.776315789473685, 9.267600000000002, 4.75, 5.776315789473685),
             Block.box(6.767600000000002, 2.25, 4.776315789473685, 9.267600000000002, 3.25, 5.776315789473685),
             Block.box(6.767600000000002, 0.75, 4.776315789473685, 9.267600000000002, 1.75, 5.776315789473685),
             Block.box(4.755726724643919, 5.25, 6.778664622394443, 5.755726724643919, 6.25, 9.278664622394443),
             Block.box(4.755726724643919, 3.75, 6.778664622394443, 5.755726724643919, 4.75, 9.278664622394443),
             Block.box(4.755726724643919, 2.25, 6.778664622394443, 5.755726724643919, 3.25, 9.278664622394443),
             Block.box(4.755726724643919, 0.75, 6.778664622394443, 5.755726724643919, 1.75, 9.278664622394443),
             Block.box(6.767600000000002, 5.25, 10.276315789473685, 9.267600000000002, 6.25, 11.276315789473685),
             Block.box(6.767600000000002, 3.75, 10.276315789473685, 9.267600000000002, 4.75, 11.276315789473685),
             Block.box(6.767600000000002, 2.25, 10.276315789473685, 9.267600000000002, 3.25, 11.276315789473685),
             Block.box(6.767600000000002, 0.75, 10.276315789473685, 9.267600000000002, 1.75, 11.276315789473685),
             Block.box(6.755726724643921, 0.75, 10.278664622394443, 9.255726724643921, 1.75, 11.278664622394443),
             Block.box(6.755726724643921, 2.25, 10.278664622394443, 9.255726724643921, 3.25, 11.278664622394443),
             Block.box(6.755726724643921, 3.75, 10.278664622394443, 9.255726724643921, 4.75, 11.278664622394443),
             Block.box(6.755726724643921, 5.25, 10.278664622394443, 9.255726724643921, 6.25, 11.278664622394443),
             Block.box(10.267600000000002, 5.25, 6.776315789473685, 11.267600000000002, 6.25, 9.276315789473685),
             Block.box(10.267600000000002, 3.75, 6.776315789473685, 11.267600000000002, 4.75, 9.276315789473685),
             Block.box(10.267600000000002, 2.25, 6.776315789473685, 11.267600000000002, 3.25, 9.276315789473685),
             Block.box(10.267600000000002, 0.75, 6.776315789473685, 11.267600000000002, 1.75, 9.276315789473685),
             Block.box(7.267600000000002, 5, 3.776315789473685, 8.767600000000002, 6, 5.026315789473685),
             Block.box(7.267600000000002, 1, 3.776315789473685, 8.767600000000002, 2, 5.026315789473685),
             Block.box(7.517600000000002, 0.25, 4.026315789473685, 8.517600000000002, 1.25, 5.026315789473685),
             Block.box(7.517600000000002, 5.5, 4.026315789473685, 8.517600000000002, 6.5, 5.026315789473685),
             Block.box(7.517600000000002, 2, 4.026315789473685, 8.517600000000002, 5, 5.026315789473685),
             Block.box(6.959567135472701, 4.167354098419463, 3.901315789473685, 8.209567135472701, 5.167354098419463, 4.901315789473685),
             Block.box(7.437921425929062, 3.0125046827803548, 3.901315789473685, 8.687921425929062, 4.012504682780355, 4.901315789473685),
             Block.box(7.9162757163854245, 1.8576552671412463, 3.901315789473685, 9.166275716385424, 2.8576552671412463, 4.901315789473685),
             Block.box(6.017600000000002, 0.10000000000000009, 6.026315789473685, 10.017600000000002, 1.1, 10.026315789473685),
             Block.box(6.017600000000002, 7, 7.026315789473685, 9.017600000000002, 9, 11.026315789473685),
             Block.box(5.017600000000002, 5, 7.026315789473685, 11.017600000000002, 8, 10.026315789473685),
             Block.box(6.017600000000002, 1, 6.026315789473685, 10.017600000000002, 8, 10.026315789473685)
    );

    @Override
    public VoxelShape getShape(BlockState state, BlockGetter p_60556_, BlockPos p_60557_, CollisionContext p_60558_) {
        switch (state.getValue(FACING))
        {
            case NORTH:
                return SHAPE_N;

            case EAST:
                return SHAPE_E;

            case WEST:
                return SHAPE_W;

            case SOUTH:
                return SHAPE_S;

            default:
                return SHAPE_N;
        }
    }


    @Nullable
    @Override
    public BlockState getStateForPlacement(BlockPlaceContext context) {
        return this.defaultBlockState().setValue(FACING,context.getHorizontalDirection().getOpposite());
    }

    @Override
    public BlockState rotate(BlockState state, LevelAccessor world, BlockPos pos, Rotation rot) {
        return state.setValue(FACING, rot.rotate(state.getValue(FACING)));
    }

    @Override
    public BlockState mirror(BlockState state, Mirror mirrorIn) {
        return state.rotate(mirrorIn.getRotation(state.getValue(FACING)));
    }

    @Override
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
        builder.add(FACING);
    }



    @Override
    protected boolean mayPlaceOn(BlockState pState, BlockGetter pLevel, BlockPos pPos) {
        return !pState.is(ModTags.Blocks.BEER_CAN_PLACE_ON);
    }


}

