package net.the_goldbeards.lootdebugs.Block.Beers;

import net.minecraft.core.BlockPos;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;
import net.the_goldbeards.lootdebugs.Block.BasicRotatableBlock;

public class OilyOafBlock extends BasicRotatableBlock
{
    public OilyOafBlock(Properties properties) {
        super(properties);
    }

    private static final VoxelShape SHAPE_S = Shapes.or(
            Block.box(7, 7, 7, 11, 9, 10),
            Block.box(6, 1, 6, 10, 8, 10),
            Block.box(6.99, 5, 4.96, 10.01, 8, 11.04),
            Block.box(12.898, 3.17, 7.5, 13.998, 5.92, 8.5),
            Block.box(13.361, 1.4965, 7.5, 14.461, 3.4965, 8.5),
            Block.box(9.95, 0.613, 7.49, 11.95, 1.713, 8.51),
            Block.box(11.85, 1.189, 7.49, 14.35, 2.289, 8.51),
            Block.box(11, 5.55, 7.48, 13.35, 6.55, 8.52),
            Block.box(13, 5.8, 7.49, 15, 6.8, 8.51),
            Block.box(10, 0, 7, 11, 7, 9),
            Block.box(5, 0, 7, 6, 7, 9),
            Block.box(7, 0, 5, 9, 7, 6),
            Block.box(7, 0, 10, 9, 7, 11),
            Block.box(7, 0, 5, 9, 7, 6),
            Block.box(7, 0, 10, 9, 7, 11),
            Block.box(5, 0, 7, 6, 7, 9),
            Block.box(10, 0, 7, 11, 7, 9),
            Block.box(6, 0.1, 6, 10, 1.1, 10),
            Block.box(10.2, 4.15, 6.9, 11.2, 5.35, 9.1),
            Block.box(10.2, 4.15, 6.9, 11.2, 5.35, 9.1),
            Block.box(10.2, 1.75, 6.9, 11.2, 2.95, 9.1),
            Block.box(10.2, 1.75, 6.9, 11.2, 2.95, 9.1),
            Block.box(6.9, 1.75, 4.8, 9.1, 2.95, 5.8),
            Block.box(6.9, 4.15, 4.8, 9.1, 5.35, 5.8),
            Block.box(4.8, 4.15, 6.9, 5.8, 5.35, 9.1),
            Block.box(4.8, 1.75, 6.9, 5.8, 2.95, 9.1),
            Block.box(4.8, 1.75, 6.9, 5.8, 2.95, 9.1),
            Block.box(4.8, 4.15, 6.9, 5.8, 5.35, 9.1),
            Block.box(4.8, 4.15, 6.9, 5.8, 5.35, 9.1),
            Block.box(4.8, 1.75, 6.9, 5.8, 2.95, 9.1),
            Block.box(6.9, 1.75, 10.2, 9.1, 2.95, 11.2),
            Block.box(10.2, 4.15, 6.9, 11.2, 5.35, 9.1),
            Block.box(10.2, 1.75, 6.9, 11.2, 2.95, 9.1),
            Block.box(6.9, 4.15, 10.2, 9.1, 5.35, 11.2),
            Block.box(7.5, 4.25, 10.35, 8.5, 5.25, 11.35),
            Block.box(7.5, 1.85, 10.35, 8.5, 2.85, 11.35),
            Block.box(4.65, 1.85, 7.5, 5.65, 2.85, 8.5),
            Block.box(10.35, 4.25, 7.5, 11.35, 5.25, 8.5),
            Block.box(10.35, 1.85, 7.5, 11.35, 2.85, 8.5),
            Block.box(10.35, 1.85, 7.5, 11.35, 2.85, 8.5),
            Block.box(10.35, 4.25, 7.5, 11.35, 5.25, 8.5),
            Block.box(7.5, 1.85, 4.65, 8.5, 2.85, 5.65),
            Block.box(7.5, 4.25, 4.65, 8.5, 5.25, 5.65),
            Block.box(7.5, 4.25, 4.65, 8.5, 5.25, 5.65),
            Block.box(7.5, 1.85, 4.65, 8.5, 2.85, 5.65),
            Block.box(4.65, 1.85, 7.5, 5.65, 2.85, 8.5),
            Block.box(4.65, 4.25, 7.5, 5.65, 5.25, 8.5),
            Block.box(4.65, 4.25, 7.5, 5.65, 5.25, 8.5),
            Block.box(4.65, 1.85, 7.5, 5.65, 2.85, 8.5),
            Block.box(4.65, 4.25, 7.5, 5.65, 5.25, 8.5),
            Block.box(6.9, -0.55, 10.2, 9.1, 0.45, 11.2),
            Block.box(4.8, -0.55, 6.9, 5.8, 0.45, 9.1),
            Block.box(4.8, -0.55, 6.9, 5.8, 0.45, 9.1),
            Block.box(10.2, -0.55, 6.9, 11.2, 0.45, 9.1),
            Block.box(10.2, -0.55, 6.9, 11.2, 0.45, 9.1),
            Block.box(10.2, -0.55, 6.9, 11.2, 0.45, 9.1),
            Block.box(6.9, -0.55, 4.8, 9.1, 0.45, 5.8),
            Block.box(4.8, -0.55, 6.9, 5.8, 0.45, 9.1)    );

    private static final VoxelShape SHAPE_E = Shapes.or(
            Block.box(7.025, 7, 4.974999999999996, 10.025, 9, 8.974999999999996),
            Block.box(6.025000000000002, 1, 5.974999999999996, 10.025, 8, 9.974999999999996),
            Block.box(4.985000000000003, 5, 5.9649999999999945, 11.065000000000001, 8, 8.984999999999994),
            Block.box(7.525, 3.17, 1.976999999999995, 8.525000000000002, 5.92, 3.0769999999999964),
            Block.box(7.525, 1.4574873803674269, 1.9361296833701158, 8.525000000000002, 3.457487380367427, 3.0361296833701137),
            Block.box(7.515000000000001, 0.613, 4.024999999999997, 8.535000000000002, 1.713, 6.024999999999997),
            Block.box(7.515000000000001, 0.6484941865578763, 1.8313704247908569, 8.535000000000002, 1.7484941865578758, 4.331370424790856),
            Block.box(7.505000000000001, 5.55, 2.6249999999999947, 8.545000000000002, 6.55, 4.974999999999996),
            Block.box(7.515000000000001, 5.5, 0.9750000000000048, 8.535000000000002, 6.5, 2.9749999999999943),
            Block.box(5.025000000000002, 0, 6.974999999999996, 6.025000000000002, 7, 8.974999999999996),
            Block.box(10.025, 0, 6.974999999999996, 11.025000000000002, 7, 8.974999999999996),
            Block.box(7.025, 0, 9.974999999999996, 9.025, 7, 10.974999999999996),
            Block.box(7.025, 0, 4.974999999999996, 9.025, 7, 5.974999999999996),
            Block.box(6.025000000000002, 0.1, 5.974999999999996, 10.025, 1.1, 9.974999999999996),
            Block.box(6.9250000000000025, 4.15, 4.774999999999997, 9.125, 5.35, 5.774999999999997),
            Block.box(6.9250000000000025, 1.75, 4.774999999999997, 9.125, 2.95, 5.774999999999997),
            Block.box(4.825000000000003, 1.75, 6.874999999999995, 5.825000000000003, 2.95, 9.074999999999994),
            Block.box(4.825000000000003, 4.15, 6.874999999999995, 5.825000000000003, 5.35, 9.074999999999994),
            Block.box(6.9250000000000025, 1.75, 10.174999999999995, 9.125, 2.95, 11.174999999999995),
            Block.box(6.9250000000000025, 4.15, 10.174999999999995, 9.125, 5.35, 11.174999999999995),
            Block.box(10.225, 1.75, 6.874999999999995, 11.225000000000001, 2.95, 9.074999999999994),
            Block.box(10.225, 4.15, 6.874999999999995, 11.225000000000001, 5.35, 9.074999999999994),
            Block.box(10.375, 4.25, 7.474999999999996, 11.375, 5.25, 8.474999999999996),
            Block.box(10.375, 1.85, 7.474999999999996, 11.375, 2.85, 8.474999999999996),
            Block.box(7.525, 1.85, 4.624999999999995, 8.525000000000002, 2.85, 5.624999999999995),
            Block.box(7.525, 4.25, 4.624999999999995, 8.525000000000002, 5.25, 5.624999999999995),
            Block.box(4.6750000000000025, 4.25, 7.474999999999996, 5.6750000000000025, 5.25, 8.474999999999996),
            Block.box(4.6750000000000025, 1.85, 7.474999999999996, 5.6750000000000025, 2.85, 8.474999999999996),
            Block.box(7.525, 4.25, 10.324999999999996, 8.525000000000002, 5.25, 11.324999999999996),
            Block.box(7.525, 1.85, 10.324999999999996, 8.525000000000002, 2.85, 11.324999999999996),
            Block.box(10.225, -0.55, 6.874999999999995, 11.225000000000001, 0.45, 9.074999999999994),
            Block.box(6.9250000000000025, -0.55, 10.174999999999995, 9.125, 0.45, 11.174999999999995),
            Block.box(6.9250000000000025, -0.55, 4.774999999999997, 9.125, 0.45, 5.774999999999997),
            Block.box(4.825000000000003, -0.55, 6.874999999999995, 5.825000000000003, 0.45, 9.074999999999994) );

    private static final VoxelShape SHAPE_N = Shapes.or(
            Block.box(5, 7, 6, 9, 9, 9),
            Block.box(6, 1, 6, 10, 8, 10),
            Block.box(5.99, 5, 4.960000000000001, 9.01, 8, 11.04),
            Block.box(2.0020000000000007, 3.17, 7.5, 3.1020000000000003, 5.92, 8.5),
            Block.box(1.5389999999999997, 1.4965, 7.5, 2.6389999999999993, 3.4965, 8.5),
            Block.box(4.050000000000001, 0.613, 7.49, 6.050000000000001, 1.713, 8.51),
            Block.box(1.6500000000000004, 1.189, 7.49, 4.15, 2.289, 8.51),
            Block.box(2.6500000000000004, 5.55, 7.48, 5, 6.55, 8.52),
            Block.box(1, 5.8, 7.49, 3, 6.8, 8.51),
            Block.box(5, 0, 7, 6, 7, 9),
            Block.box(10, 0, 7, 11, 7, 9),
            Block.box(7, 0, 10, 9, 7, 11),
            Block.box(7, 0, 5, 9, 7, 6),
            Block.box(7, 0, 10, 9, 7, 11),
            Block.box(7, 0, 5, 9, 7, 6),
            Block.box(10, 0, 7, 11, 7, 9),
            Block.box(5, 0, 7, 6, 7, 9),
            Block.box(6, 0.1, 6, 10, 1.1, 10),
            Block.box(4.800000000000001, 4.15, 6.9, 5.800000000000001, 5.35, 9.1),
            Block.box(4.800000000000001, 4.15, 6.9, 5.800000000000001, 5.35, 9.1),
            Block.box(4.800000000000001, 1.75, 6.9, 5.800000000000001, 2.95, 9.1),
            Block.box(4.800000000000001, 1.75, 6.9, 5.800000000000001, 2.95, 9.1),
            Block.box(6.9, 1.75, 10.2, 9.1, 2.95, 11.2),
            Block.box(6.9, 4.15, 10.2, 9.1, 5.35, 11.2),
            Block.box(10.2, 4.15, 6.9, 11.2, 5.35, 9.1),
            Block.box(10.2, 1.75, 6.9, 11.2, 2.95, 9.1),
            Block.box(10.2, 1.75, 6.9, 11.2, 2.95, 9.1),
            Block.box(10.2, 4.15, 6.9, 11.2, 5.35, 9.1),
            Block.box(10.2, 4.15, 6.9, 11.2, 5.35, 9.1),
            Block.box(10.2, 1.75, 6.9, 11.2, 2.95, 9.1),
            Block.box(6.9, 1.75, 4.800000000000001, 9.1, 2.95, 5.800000000000001),
            Block.box(4.800000000000001, 4.15, 6.9, 5.800000000000001, 5.35, 9.1),
            Block.box(4.800000000000001, 1.75, 6.9, 5.800000000000001, 2.95, 9.1),
            Block.box(6.9, 4.15, 4.800000000000001, 9.1, 5.35, 5.800000000000001),
            Block.box(7.5, 4.25, 4.65, 8.5, 5.25, 5.65),
            Block.box(7.5, 1.85, 4.65, 8.5, 2.85, 5.65),
            Block.box(10.35, 1.85, 7.5, 11.35, 2.85, 8.5),
            Block.box(4.65, 4.25, 7.5, 5.65, 5.25, 8.5),
            Block.box(4.65, 1.85, 7.5, 5.65, 2.85, 8.5),
            Block.box(4.65, 1.85, 7.5, 5.65, 2.85, 8.5),
            Block.box(4.65, 4.25, 7.5, 5.65, 5.25, 8.5),
            Block.box(7.5, 1.85, 10.35, 8.5, 2.85, 11.35),
            Block.box(7.5, 4.25, 10.35, 8.5, 5.25, 11.35),
            Block.box(7.5, 4.25, 10.35, 8.5, 5.25, 11.35),
            Block.box(7.5, 1.85, 10.35, 8.5, 2.85, 11.35),
            Block.box(10.35, 1.85, 7.5, 11.35, 2.85, 8.5),
            Block.box(10.35, 4.25, 7.5, 11.35, 5.25, 8.5),
            Block.box(10.35, 4.25, 7.5, 11.35, 5.25, 8.5),
            Block.box(10.35, 1.85, 7.5, 11.35, 2.85, 8.5),
            Block.box(10.35, 4.25, 7.5, 11.35, 5.25, 8.5),
            Block.box(6.9, -0.55, 4.800000000000001, 9.1, 0.45, 5.800000000000001),
            Block.box(10.2, -0.55, 6.9, 11.2, 0.45, 9.1),
            Block.box(10.2, -0.55, 6.9, 11.2, 0.45, 9.1),
            Block.box(4.800000000000001, -0.55, 6.9, 5.800000000000001, 0.45, 9.1),
            Block.box(4.800000000000001, -0.55, 6.9, 5.800000000000001, 0.45, 9.1),
            Block.box(4.800000000000001, -0.55, 6.9, 5.800000000000001, 0.45, 9.1),
            Block.box(6.9, -0.55, 10.2, 9.1, 0.45, 11.2),
            Block.box(10.2, -0.55, 6.9, 11.2, 0.45, 9.1)
    );

    private static final VoxelShape SHAPE_W = Shapes.or(
            Block.box(5.975, 7, 7.025000000000004, 8.975, 9, 11.025000000000004),
            Block.box(5.975, 1, 6.025000000000004, 9.974999999999998, 8, 10.025000000000004),
            Block.box(4.934999999999999, 5, 7.015000000000006, 11.014999999999997, 8, 10.035000000000005),
            Block.box(7.474999999999998, 3.17, 12.923000000000004, 8.475, 5.92, 14.023000000000005),
            Block.box(7.474999999999998, 1.4574873803674269, 12.963870316629887, 8.475, 3.457487380367427, 14.063870316629885),
            Block.box(7.464999999999998, 0.613, 9.975000000000003, 8.485, 1.713, 11.975000000000003),
            Block.box(7.464999999999998, 0.6484941865578763, 11.668629575209144, 8.485, 1.7484941865578758, 14.168629575209144),
            Block.box(7.454999999999998, 5.55, 11.025000000000004, 8.495, 6.55, 13.375000000000005),
            Block.box(7.464999999999998, 5.5, 13.025000000000006, 8.485, 6.5, 15.024999999999995),
            Block.box(9.974999999999998, 0, 7.025000000000004, 10.974999999999998, 7, 9.025000000000004),
            Block.box(4.974999999999998, 0, 7.025000000000004, 5.975, 7, 9.025000000000004),
            Block.box(6.975, 0, 5.025000000000004, 8.975, 7, 6.025000000000004),
            Block.box(6.975, 0, 10.025000000000004, 8.975, 7, 11.025000000000004),
            Block.box(5.975, 0.1, 6.025000000000004, 9.974999999999998, 1.1, 10.025000000000004),
            Block.box(6.875, 4.15, 10.225000000000003, 9.074999999999998, 5.35, 11.225000000000003),
            Block.box(6.875, 1.75, 10.225000000000003, 9.074999999999998, 2.95, 11.225000000000003),
            Block.box(10.174999999999997, 1.75, 6.925000000000006, 11.174999999999997, 2.95, 9.125000000000005),
            Block.box(10.174999999999997, 4.15, 6.925000000000006, 11.174999999999997, 5.35, 9.125000000000005),
            Block.box(6.875, 1.75, 4.825000000000005, 9.074999999999998, 2.95, 5.825000000000005),
            Block.box(6.875, 4.15, 4.825000000000005, 9.074999999999998, 5.35, 5.825000000000005),
            Block.box(4.774999999999999, 1.75, 6.925000000000006, 5.775, 2.95, 9.125000000000005),
            Block.box(4.774999999999999, 4.15, 6.925000000000006, 5.775, 5.35, 9.125000000000005),
            Block.box(4.625, 4.25, 7.525000000000004, 5.625, 5.25, 8.525000000000004),
            Block.box(4.625, 1.85, 7.525000000000004, 5.625, 2.85, 8.525000000000004),
            Block.box(7.474999999999998, 1.85, 10.375000000000005, 8.475, 2.85, 11.375000000000005),
            Block.box(7.474999999999998, 4.25, 10.375000000000005, 8.475, 5.25, 11.375000000000005),
            Block.box(10.324999999999998, 4.25, 7.525000000000004, 11.324999999999998, 5.25, 8.525000000000004),
            Block.box(10.324999999999998, 1.85, 7.525000000000004, 11.324999999999998, 2.85, 8.525000000000004),
            Block.box(7.474999999999998, 4.25, 4.675000000000004, 8.475, 5.25, 5.675000000000004),
            Block.box(7.474999999999998, 1.85, 4.675000000000004, 8.475, 2.85, 5.675000000000004),
            Block.box(4.774999999999999, -0.55, 6.925000000000006, 5.775, 0.45, 9.125000000000005),
            Block.box(6.875, -0.55, 4.825000000000005, 9.074999999999998, 0.45, 5.825000000000005),
            Block.box(6.875, -0.55, 10.225000000000003, 9.074999999999998, 0.45, 11.225000000000003),
            Block.box(10.174999999999997, -0.55, 6.925000000000006, 11.174999999999997, 0.45, 9.125000000000005)
    );

    @Override
    public VoxelShape getShape(BlockState state, BlockGetter p_60556_, BlockPos p_60557_, CollisionContext p_60558_) {
        switch (state.getValue(FACING))
        {
            case NORTH:
                return SHAPE_N;

            case EAST:
                return SHAPE_E;

            case WEST:
                return SHAPE_W;

            case SOUTH:
                return SHAPE_S;

            default:
                return SHAPE_N;
        }
    }
}
