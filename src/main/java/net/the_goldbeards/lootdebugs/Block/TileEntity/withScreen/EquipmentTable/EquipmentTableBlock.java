package net.the_goldbeards.lootdebugs.Block.TileEntity.withScreen.EquipmentTable;

import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.sounds.SoundSource;
import net.minecraft.util.Mth;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.LevelAccessor;
import net.minecraft.world.level.LevelReader;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.entity.BlockEntityTicker;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.BlockStateProperties;
import net.minecraft.world.level.block.state.properties.DirectionProperty;
import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
import net.minecraft.world.level.block.state.properties.EnumProperty;
import net.minecraft.world.level.material.PushReaction;
import net.minecraft.world.phys.BlockHitResult;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;
import net.minecraftforge.network.NetworkHooks;
import net.the_goldbeards.lootdebugs.Sound.ModSounds;
import org.jetbrains.annotations.Nullable;

public class EquipmentTableBlock extends BaseEntityBlock  {


    private static final VoxelShape SHAPE_N_UPPER = Shapes.or(
                    Block.box(-0.25, -0.5, -0.25, 16.25, 15.75, -0.25),
            Block.box(-0.25, -0.5, -0.25, -0.25, 15.75, 16.25),
            Block.box(-0.25, -0.5, 16.25, 16.25, 15.75, 16.25),
            Block.box(16.25, -0.5, -0.25, 16.25, 15.75, 16.25),
            Block.box(-1, 13.95, -1, 17, 15.95, 17),
            Block.box(11.625, 0.6131916343866783, 7.761031599513283, 12.625, 3.61319163438668, 7.761031599513283),
            Block.box(11.125, 3.6131916343866806, 7.261031599513284, 13.125, 6.613191634386681, 8.261031599513284),
            Block.box(11.025, 4.613191634386681, 6.661031599513283, 13.225, 6.613191634386681, 8.861031599513282),
            Block.box(11.125, 7.029545293304659, 6.103606021057541, 13.125, 9.02954529330466, 11.10360602105754),
            Block.box(11.025, 6.925080977144816, 5.294642945811811, 13.225, 9.125080977144815, 7.294642945811811),
            Block.box(11.125, 9.67285829400136, 4.72727620529332, 13.125, 14.67285829400136, 6.72727620529332),
            Block.box(10.625, 12.45, 2.625, 13.625, 13.95, 5.625),
            Block.box(1.25, 11.5, 1.75, 7.75, 14, 8.25),
            Block.box(2, 9.75, 2.5, 7, 11.5, 7.5),
            Block.box(3.25, 8.5, 3.75, 5.75, 9.75, 6.25),
            Block.box(8.454089373336858, 11.75, 3.939780503039497, 9.954089373336858, 13.75, 4.939780503039497),
            Block.box(9.028119373336859, 11.75, 2.5539605030394963, 10.528119373336859, 13.75, 3.5539605030394963),
            Block.box(7.880069373336859, 11.75, 5.325600503039496, 9.380069373336859, 13.75, 6.325600503039496),
            Block.box(7.3060393733368585, 11.75, 6.711420503039497, 8.806039373336858, 13.75, 7.711420503039497),
            Block.box(6.249479373336859, 11.75, 7.002620503039497, 7.249479373336859, 13.75, 8.502620503039497),
            Block.box(4.8636593733368585, 11.75, 6.428590503039498, 5.8636593733368585, 13.75, 7.928590503039498),
            Block.box(3.4778393733368578, 11.75, 5.854570503039497, 4.477839373336858, 13.75, 7.354570503039497),
            Block.box(2.092019373336859, 11.75, 5.2805405030394965, 3.092019373336859, 13.75, 6.7805405030394965),
            Block.box(8.736919373336859, 11.75, 0.997400503039497, 9.736919373336859, 13.75, 2.497400503039497),
            Block.box(7.351099373336858, 11.75, 0.4233705030394965, 8.351099373336858, 13.75, 1.9233705030394965),
            Block.box(5.965289373336859, 11.75, -0.15064949696050434, 6.965289373336859, 13.75, 1.3493505030394957),
            Block.box(4.579469373336858, 11.75, -0.7246794969605048, 5.579469373336858, 13.75, 0.7753205030394952),
            Block.box(3.022899373336859, 11.75, 0.06652050303949686, 4.522899373336859, 13.75, 1.0665205030394969),
            Block.box(2.448879373336858, 11.75, 1.4523405030394958, 3.948879373336858, 13.75, 2.452340503039496),
            Block.box(1.8748493733368576, 11.75, 2.8381605030394965, 3.3748493733368576, 13.75, 3.8381605030394965),
            Block.box(1.3008293733368568, 11.75, 4.223980503039497, 2.8008293733368586, 13.75, 5.223980503039497),
            Block.box(1.1327001737020712, 10, 8.41027755681637, 2.632700173702071, 11.25, 9.41027755681637),
            Block.box(0.5586701737020725, 10, 7.024457556816371, 2.0586701737020725, 11.25, 8.02445755681637),
            Block.box(-0.01534982629792836, 10, 5.63864755681637, 1.4846501737020716, 11.25, 6.63864755681637),
            Block.box(0.7375701737020712, 10, 4.08968755681637, 1.7375701737020712, 11.25, 5.58968755681637),
            Block.box(2.123390173702072, 10, 3.5156675568163696, 3.123390173702072, 11.25, 5.0156675568163696),
            Block.box(3.5092101737020727, 10, 2.941637556816369, 4.509210173702073, 11.25, 4.441637556816369),
            Block.box(2.6892601737020723, 10, 8.70147755681637, 3.6892601737020723, 11.25, 10.20147755681637),
            Block.box(4.075080173702071, 10, 8.127447556816369, 5.075080173702071, 11.25, 9.62744755681637),
            Block.box(5.460900173702072, 10, 7.55342755681637, 6.460900173702072, 11.25, 9.05342755681637),
            Block.box(5.752090173702072, 10, 6.496867556816371, 7.252090173702072, 11.25, 7.496867556816371),
            Block.box(5.178070173702071, 10, 5.11104755681637, 6.678070173702071, 11.25, 6.11104755681637),
            Block.box(4.604040173702073, 10, 3.7252275568163693, 6.104040173702073, 11.25, 4.725227556816369),
            Block.box(6.493349373336859, 8.25, 2.232860503039497, 7.493349373336859, 9.5, 3.732860503039497),
            Block.box(6.070579373336859, 8.25, 4.467850503039497, 7.570579373336859, 9.5, 5.467850503039497),
            Block.box(4.258369373336858, 8.25, 2.310090503039497, 5.758369373336858, 9.5, 3.310090503039497),
            Block.box(5.292309373336858, 8.25, 1.7353805030394973, 6.292309373336858, 9.5, 3.2353805030394973),
            Block.box(3.7608793733368593, 8.25, 3.5111405030394973, 5.260879373336859, 9.5, 4.511140503039497),
            Block.box(4.3355993733368585, 8.25, 4.045070503039497, 5.3355993733368585, 9.5, 5.545070503039497),
            Block.box(5.536639373336859, 8.25, 4.542560503039496, 6.536639373336859, 9.5, 6.042560503039496),
            Block.box(6.568069373336858, 8.25, 3.266800503039496, 8.068069373336858, 9.5, 4.266800503039496),
            Block.box(3.388970173702072, 7.5, 5.289467556816369, 4.388970173702072, 9, 6.539467556816369),
            Block.box(2.847770173702072, 7.5, 6.59603755681637, 3.847770173702072, 9, 7.84603755681637)
    );

    private static final VoxelShape SHAPE_E_UPPER = Shapes.or(
                    Block.box(16.25, -0.5, -0.25, 16.25, 15.75, 16.25),
            Block.box(-0.25, -0.5, -0.25, 16.25, 15.75, -0.25),
            Block.box(-0.25, -0.5, -0.25, -0.25, 15.75, 16.25),
            Block.box(-0.25, -0.5, 16.25, 16.25, 15.75, 16.25),
            Block.box(-1, 13.95, -1, 17, 15.95, 17),
            Block.box(8.238968400486717, 0.6131916343866783, 11.625, 8.238968400486717, 3.61319163438668, 12.625),
            Block.box(7.738968400486716, 3.6131916343866806, 11.125, 8.738968400486716, 6.613191634386681, 13.125),
            Block.box(7.138968400486718, 4.613191634386681, 11.025, 9.338968400486717, 6.613191634386681, 13.225),
            Block.box(4.896393978942459, 7.029545293304659, 11.125, 9.89639397894246, 9.02954529330466, 13.125),
            Block.box(8.70535705418819, 6.925080977144816, 11.025, 10.70535705418819, 9.125080977144815, 13.225),
            Block.box(9.27272379470668, 9.67285829400136, 11.125, 11.27272379470668, 14.67285829400136, 13.125),
            Block.box(10.375, 12.45, 10.625, 13.375, 13.95, 13.625),
            Block.box(7.75, 11.5, 1.25, 14.25, 14, 7.75),
            Block.box(8.5, 9.75, 2, 13.5, 11.5, 7),
            Block.box(9.75, 8.5, 3.25, 12.25, 9.75, 5.75),
            Block.box(11.060219496960503, 11.75, 8.454089373336858, 12.060219496960503, 13.75, 9.954089373336858),
            Block.box(12.446039496960504, 11.75, 9.028119373336859, 13.446039496960504, 13.75, 10.528119373336859),
            Block.box(9.674399496960504, 11.75, 7.880069373336859, 10.674399496960504, 13.75, 9.380069373336859),
            Block.box(8.288579496960503, 11.75, 7.3060393733368585, 9.288579496960503, 13.75, 8.806039373336858),
            Block.box(7.497379496960503, 11.75, 6.249479373336859, 8.997379496960503, 13.75, 7.249479373336859),
            Block.box(8.071409496960502, 11.75, 4.8636593733368585, 9.571409496960502, 13.75, 5.8636593733368585),
            Block.box(8.645429496960503, 11.75, 3.4778393733368578, 10.145429496960503, 13.75, 4.477839373336858),
            Block.box(9.219459496960503, 11.75, 2.092019373336859, 10.719459496960503, 13.75, 3.092019373336859),
            Block.box(13.502599496960503, 11.75, 8.736919373336859, 15.002599496960503, 13.75, 9.736919373336859),
            Block.box(14.076629496960503, 11.75, 7.351099373336858, 15.576629496960503, 13.75, 8.351099373336858),
            Block.box(14.650649496960504, 11.75, 5.965289373336859, 16.150649496960504, 13.75, 6.965289373336859),
            Block.box(15.224679496960505, 11.75, 4.579469373336858, 16.724679496960505, 13.75, 5.579469373336858),
            Block.box(14.933479496960503, 11.75, 3.022899373336859, 15.933479496960503, 13.75, 4.522899373336859),
            Block.box(13.547659496960504, 11.75, 2.448879373336858, 14.547659496960504, 13.75, 3.948879373336858),
            Block.box(12.161839496960503, 11.75, 1.8748493733368576, 13.161839496960503, 13.75, 3.3748493733368576),
            Block.box(10.776019496960503, 11.75, 1.3008293733368568, 11.776019496960503, 13.75, 2.8008293733368586),
            Block.box(6.58972244318363, 10, 1.1327001737020712, 7.58972244318363, 11.25, 2.632700173702071),
            Block.box(7.975542443183629, 10, 0.5586701737020725, 8.97554244318363, 11.25, 2.0586701737020725),
            Block.box(9.36135244318363, 10, -0.01534982629792836, 10.36135244318363, 11.25, 1.4846501737020716),
            Block.box(10.41031244318363, 10, 0.7375701737020712, 11.91031244318363, 11.25, 1.7375701737020712),
            Block.box(10.98433244318363, 10, 2.123390173702072, 12.48433244318363, 11.25, 3.123390173702072),
            Block.box(11.558362443183631, 10, 3.5092101737020727, 13.058362443183631, 11.25, 4.509210173702073),
            Block.box(5.79852244318363, 10, 2.6892601737020723, 7.29852244318363, 11.25, 3.6892601737020723),
            Block.box(6.372552443183629, 10, 4.075080173702071, 7.872552443183631, 11.25, 5.075080173702071),
            Block.box(6.94657244318363, 10, 5.460900173702072, 8.44657244318363, 11.25, 6.460900173702072),
            Block.box(8.50313244318363, 10, 5.752090173702072, 9.50313244318363, 11.25, 7.252090173702072),
            Block.box(9.88895244318363, 10, 5.178070173702071, 10.88895244318363, 11.25, 6.678070173702071),
            Block.box(11.27477244318363, 10, 4.604040173702073, 12.27477244318363, 11.25, 6.104040173702073),
            Block.box(12.267139496960503, 8.25, 6.493349373336859, 13.767139496960503, 9.5, 7.493349373336859),
            Block.box(10.532149496960503, 8.25, 6.070579373336859, 11.532149496960503, 9.5, 7.570579373336859),
            Block.box(12.689909496960503, 8.25, 4.258369373336858, 13.689909496960503, 9.5, 5.758369373336858),
            Block.box(12.764619496960503, 8.25, 5.292309373336858, 14.264619496960503, 9.5, 6.292309373336858),
            Block.box(11.488859496960503, 8.25, 3.7608793733368593, 12.488859496960503, 9.5, 5.260879373336859),
            Block.box(10.454929496960503, 8.25, 4.3355993733368585, 11.954929496960503, 9.5, 5.3355993733368585),
            Block.box(9.957439496960504, 8.25, 5.536639373336859, 11.457439496960504, 9.5, 6.536639373336859),
            Block.box(11.733199496960504, 8.25, 6.568069373336858, 12.733199496960504, 9.5, 8.068069373336858),
            Block.box(9.46053244318363, 7.5, 3.388970173702072, 10.71053244318363, 9, 4.388970173702072),
            Block.box(8.15396244318363, 7.5, 2.847770173702072, 9.40396244318363, 9, 3.847770173702072)
    );

    private static final VoxelShape SHAPE_W_UPPER = Shapes.or(
                    Block.box(-0.25, -0.5, -0.25, -0.25, 15.75, 16.25),
            Block.box(-0.25, -0.5, 16.25, 16.25, 15.75, 16.25),
            Block.box(16.25, -0.5, -0.25, 16.25, 15.75, 16.25),
            Block.box(-0.25, -0.5, -0.25, 16.25, 15.75, -0.25),
            Block.box(-1, 13.95, -1, 17, 15.95, 17),
            Block.box(7.761031599513283, 0.6131916343866783, 3.375, 7.761031599513283, 3.61319163438668, 4.375),
            Block.box(7.261031599513284, 3.6131916343866806, 2.875, 8.261031599513284, 6.613191634386681, 4.875),
            Block.box(6.661031599513283, 4.613191634386681, 2.7750000000000004, 8.861031599513282, 6.613191634386681, 4.975),
            Block.box(6.103606021057541, 7.029545293304659, 2.875, 11.10360602105754, 9.02954529330466, 4.875),
            Block.box(5.294642945811811, 6.925080977144816, 2.7750000000000004, 7.294642945811811, 9.125080977144815, 4.975),
            Block.box(4.72727620529332, 9.67285829400136, 2.875, 6.72727620529332, 14.67285829400136, 4.875),
            Block.box(2.625, 12.45, 2.375, 5.625, 13.95, 5.375),
            Block.box(1.75, 11.5, 8.25, 8.25, 14, 14.75),
            Block.box(2.5, 9.75, 9, 7.5, 11.5, 14),
            Block.box(3.75, 8.5, 10.25, 6.25, 9.75, 12.75),
            Block.box(3.939780503039497, 11.75, 6.045910626663142, 4.939780503039497, 13.75, 7.545910626663142),
            Block.box(2.5539605030394963, 11.75, 5.4718806266631415, 3.5539605030394963, 13.75, 6.9718806266631415),
            Block.box(5.325600503039496, 11.75, 6.619930626663141, 6.325600503039496, 13.75, 8.119930626663141),
            Block.box(6.711420503039497, 11.75, 7.1939606266631415, 7.711420503039497, 13.75, 8.693960626663142),
            Block.box(7.002620503039497, 11.75, 8.75052062666314, 8.502620503039497, 13.75, 9.75052062666314),
            Block.box(6.428590503039498, 11.75, 10.136340626663142, 7.928590503039498, 13.75, 11.136340626663142),
            Block.box(5.854570503039497, 11.75, 11.522160626663142, 7.354570503039497, 13.75, 12.522160626663142),
            Block.box(5.2805405030394965, 11.75, 12.907980626663141, 6.7805405030394965, 13.75, 13.907980626663141),
            Block.box(0.997400503039497, 11.75, 6.263080626663141, 2.497400503039497, 13.75, 7.263080626663141),
            Block.box(0.4233705030394965, 11.75, 7.648900626663142, 1.9233705030394965, 13.75, 8.648900626663142),
            Block.box(-0.15064949696050434, 11.75, 9.034710626663141, 1.3493505030394957, 13.75, 10.034710626663141),
            Block.box(-0.7246794969605048, 11.75, 10.420530626663142, 0.7753205030394952, 13.75, 11.420530626663142),
            Block.box(0.06652050303949686, 11.75, 11.477100626663141, 1.0665205030394969, 13.75, 12.977100626663141),
            Block.box(1.4523405030394958, 11.75, 12.051120626663142, 2.452340503039496, 13.75, 13.551120626663142),
            Block.box(2.8381605030394965, 11.75, 12.625150626663142, 3.8381605030394965, 13.75, 14.125150626663142),
            Block.box(4.223980503039497, 11.75, 13.199170626663141, 5.223980503039497, 13.75, 14.699170626663143),
            Block.box(8.41027755681637, 10, 13.367299826297929, 9.41027755681637, 11.25, 14.867299826297929),
            Block.box(7.024457556816371, 10, 13.941329826297927, 8.02445755681637, 11.25, 15.441329826297927),
            Block.box(5.63864755681637, 10, 14.515349826297928, 6.63864755681637, 11.25, 16.01534982629793),
            Block.box(4.08968755681637, 10, 14.262429826297929, 5.58968755681637, 11.25, 15.262429826297929),
            Block.box(3.5156675568163696, 10, 12.876609826297928, 5.0156675568163696, 11.25, 13.876609826297928),
            Block.box(2.941637556816369, 10, 11.490789826297927, 4.441637556816369, 11.25, 12.490789826297927),
            Block.box(8.70147755681637, 10, 12.310739826297928, 10.20147755681637, 11.25, 13.310739826297928),
            Block.box(8.127447556816369, 10, 10.924919826297929, 9.62744755681637, 11.25, 11.924919826297929),
            Block.box(7.55342755681637, 10, 9.539099826297928, 9.05342755681637, 11.25, 10.539099826297928),
            Block.box(6.496867556816371, 10, 8.747909826297928, 7.496867556816371, 11.25, 10.247909826297928),
            Block.box(5.11104755681637, 10, 9.321929826297929, 6.11104755681637, 11.25, 10.821929826297929),
            Block.box(3.7252275568163693, 10, 9.895959826297927, 4.725227556816369, 11.25, 11.395959826297927),
            Block.box(2.232860503039497, 8.25, 8.506650626663141, 3.732860503039497, 9.5, 9.506650626663141),
            Block.box(4.467850503039497, 8.25, 8.429420626663141, 5.467850503039497, 9.5, 9.929420626663141),
            Block.box(2.310090503039497, 8.25, 10.241630626663142, 3.310090503039497, 9.5, 11.741630626663142),
            Block.box(1.7353805030394973, 8.25, 9.707690626663142, 3.2353805030394973, 9.5, 10.707690626663142),
            Block.box(3.5111405030394973, 8.25, 10.73912062666314, 4.511140503039497, 9.5, 12.23912062666314),
            Block.box(4.045070503039497, 8.25, 10.664400626663141, 5.545070503039497, 9.5, 11.664400626663141),
            Block.box(4.542560503039496, 8.25, 9.46336062666314, 6.042560503039496, 9.5, 10.46336062666314),
            Block.box(3.266800503039496, 8.25, 7.931930626663142, 4.266800503039496, 9.5, 9.431930626663142),
            Block.box(5.289467556816369, 7.5, 11.611029826297928, 6.539467556816369, 9, 12.611029826297928),
            Block.box(6.59603755681637, 7.5, 12.152229826297928, 7.84603755681637, 9, 13.152229826297928)
    );

    private static final VoxelShape SHAPE_S_UPPER = Shapes.or(Block.box(-0.25, -0.5, 16.25, 16.25, 15.75, 16.25),
            Block.box(16.25, -0.5, -0.25, 16.25, 15.75, 16.25),
            Block.box(-0.25, -0.5, -0.25, 16.25, 15.75, -0.25),
            Block.box(-0.25, -0.5, -0.25, -0.25, 15.75, 16.25),
            Block.box(-1, 13.95, -1, 17, 15.95, 17),
            Block.box(3.375, -1.2476000000000003, 8.13906, 4.375, 1.7524000000000015, 8.13906),
            Block.box(2.875, 1.7524000000000015, 7.63906, 4.875, 4.7524000000000015, 8.63906),
            Block.box(2.775, 2.7524000000000015, 7.03906, 4.975, 4.7524000000000015, 9.23906),
            Block.box(2.875, 7.789999999999999, 5.46577, 4.875, 9.79, 10.46577),
            Block.box(2.775, 7.692540000000001, 9.15292, 4.975, 9.89254, 11.15292),
            Block.box(2.875, 8.45, 10.875, 4.875, 13.45, 12.875),
            Block.box(2.375, 12.45, 10.375, 5.375, 13.95, 13.375),
            Block.box(8.25, 11.5, 7.75, 14.75, 14, 14.25),
            Block.box(9, 9.75, 8.5, 14, 11.5, 13.5),
            Block.box(10.25, 8.5, 9.75, 12.75, 9.75, 12.25),
            Block.box(7.46081, 11.75, 9.94816, 8.96081, 13.75, 10.94816),
            Block.box(6.88678, 11.75, 11.33398, 8.38678, 13.75, 12.33398),
            Block.box(8.03483, 11.75, 8.56234, 9.53483, 13.75, 9.56234),
            Block.box(8.60886, 11.75, 7.17652, 10.10886, 13.75, 8.17652),
            Block.box(10.16542, 11.75, 6.38532, 11.16542, 13.75, 7.88532),
            Block.box(11.55124, 11.75, 6.95935, 12.55124, 13.75, 8.45935),
            Block.box(12.93706, 11.75, 7.53337, 13.93706, 13.75, 9.03337),
            Block.box(14.32288, 11.75, 8.1074, 15.32288, 13.75, 9.6074),
            Block.box(7.67798, 11.75, 12.39054, 8.67798, 13.75, 13.89054),
            Block.box(9.0638, 11.75, 12.96457, 10.0638, 13.75, 14.46457),
            Block.box(10.44961, 11.75, 13.53859, 11.44961, 13.75, 15.03859),
            Block.box(11.83543, 11.75, 14.11262, 12.83543, 13.75, 15.61262),
            Block.box(12.892, 11.75, 13.82142, 14.392, 13.75, 14.82142),
            Block.box(13.46602, 11.75, 12.4356, 14.96602, 13.75, 13.4356),
            Block.box(14.04005, 11.75, 11.04978, 15.54005, 13.75, 12.04978),
            Block.box(14.61407, 11.75, 9.66396, 16.11407, 13.75, 10.66396),
            Block.box(12.48567, 10, 8.15859, 13.98567, 11.25, 9.15859),
            Block.box(13.0597, 10, 9.54441, 14.5597, 11.25, 10.54441),
            Block.box(13.63372, 10, 10.93022, 15.13372, 11.25, 11.93022),
            Block.box(13.3808, 10, 11.97918, 14.3808, 11.25, 13.47918),
            Block.box(11.99498, 10, 12.5532, 12.99498, 11.25, 14.0532),
            Block.box(10.60916, 10, 13.12723, 11.60916, 11.25, 14.62723),
            Block.box(11.42911, 10, 7.36739, 12.42911, 11.25, 8.86739),
            Block.box(10.04329, 10, 7.94142, 11.04329, 11.25, 9.44142),
            Block.box(8.65747, 10, 8.51544, 9.65747, 11.25, 10.01544),
            Block.box(7.86628, 10, 10.072, 9.36628, 11.25, 11.072),
            Block.box(8.4403, 10, 11.45782, 9.9403, 11.25, 12.45782),
            Block.box(9.01433, 10, 12.84364, 10.51433, 11.25, 13.84364),
            Block.box(9.92155, 8.25, 11.15508, 10.92155, 9.5, 12.65508),
            Block.box(9.84432, 8.25, 9.42009, 11.34432, 9.5, 10.42009),
            Block.box(11.65653, 8.25, 11.57785, 13.15653, 9.5, 12.57785),
            Block.box(11.12259, 8.25, 11.65256, 12.12259, 9.5, 13.15256),
            Block.box(12.15402, 8.25, 10.3768, 13.65402, 9.5, 11.3768),
            Block.box(12.0793, 8.25, 9.34287, 13.0793, 9.5, 10.84287),
            Block.box(10.87826, 8.25, 8.84538, 11.87826, 9.5, 10.34538),
            Block.box(9.34683, 8.25, 10.62114, 10.84683, 9.5, 11.62114),
            Block.box(10.7294, 7.5, 11.0294, 11.7294, 9, 12.2794),
            Block.box(11.2706, 7.5, 9.72283, 12.2706, 9, 10.97283)
    );


    private static final VoxelShape SHAPE_N_LOWER = Shapes.or(
                    Block.box(0.5, 0, 2, 3.5, 14, 14),
            Block.box(12.5, 0, 2, 15.5, 14, 14),
            Block.box(3.5, 7, 13, 12.5, 14, 13),
            Block.box(3.5, 7, 3, 12.5, 14, 3),
            Block.box(-0.5, 13, -0.5, 16.5, 15.5, 16.5),
            Block.box(-0.5, 13, 15.5, 16.5, 15.5, 15.5),
            Block.box(-0.5, 13, 0.5, 16.5, 15.5, 0.5),
            Block.box(15.5, 13, -0.5, 15.5, 15.5, 16.5),
            Block.box(0.5, 13, -0.5, 0.5, 15.5, 16.5),
            Block.box(0.5, 13.6, -0.3999999999999986, 15.5, 14.6, 15.5),
            Block.box(11.443950196844227, 14.6, 5.281781388930899, 12.943950196844227, 17.6, 8.281781388930899),
            Block.box(11.443950196844227, 15.6, 6.281781388930899, 12.943950196844227, 16.6, 6.281781388930899),
            Block.box(11.443950196844227, 15.6, 7.281781388930899, 12.943950196844227, 16.6, 7.281781388930899),
            Block.box(11.443950196844227, 15.6, 6.281781388930899, 12.943950196844227, 15.6, 7.281781388930899),
            Block.box(11.443950196844227, 16.6, 6.281781388930899, 12.943950196844227, 16.6, 7.281781388930899),
            Block.box(11.443950196844227, 14.61, 8.281781388930899, 12.943950196844227, 14.61, 10.281781388930899),
            Block.box(11.335906984722108, 0.005849999999999911, 7.229713363836764, 12.93590698472211, 1.60585, 8.229713363836764),
            Block.box(11.43590698472211, 0.10585, 7.329713363836763, 12.835906984722108, 1.50585, 8.779713363836764),
            Block.box(11.43590698472211, 0.10585, 9.179713363836765, 12.835906984722108, 1.50585, 10.629713363836764),
            Block.box(11.635906984722109, 0.30584999999999996, 7.429713363836765, 12.635906984722109, 1.30585, 10.529713363836764),
            Block.box(5.826258260831061, 3.3058500000000035, 1.5127361383184628, 8.42625826083106, 4.805850000000004, 4.112736138318461),
            Block.box(4.951258260831061, 3.1558500000000036, 2.31273613831846, 6.201258260831061, 4.405850000000004, 3.3127361383184617),
            Block.box(4.87625826083106, 1.1558500000000036, 0.3127361383184599, 9.62625826083106, 3.1558500000000036, 5.312736138318462),
            Block.box(4.976258260831061, -0.0941499999999964, 2.31273613831846, 6.226258260831061, 1.1558500000000036, 3.3127361383184617),
            Block.box(5.62625826083106, 0.0058500000000035746, 1.31273613831846, 8.62625826083106, 1.0058500000000035, 4.312736138318462),
            Block.box(4.87625826083106, 0.1558500000000036, 0.5627361383184599, 9.37625826083106, 4.155850000000004, 5.062736138318462),
            Block.box(5.02419171936457, 0.14999999999999902, 4.977543085214489, 6.77419171936457, 1.899999999999999, 10.977543085214489),
            Block.box(4.89919171936457, 0.024999999999999023, 8.602543085214489, 6.89919171936457, 2.024999999999999, 9.602543085214489),
            Block.box(4.89919171936457, 0.024999999999999023, 7.227543085214489, 6.89919171936457, 2.024999999999999, 8.477543085214489),
            Block.box(4.89919171936457, 0.024999999999999023, 4.852543085214489, 6.89919171936457, 2.024999999999999, 6.102543085214489),
            Block.box(2.1521767821539974, 14.1, 5.727452545034382, 4.402176782153997, 15.1, 6.977452545034382),
            Block.box(2.1521767821539974, 14.1, 3.9774525450343816, 4.402176782153997, 15.1, 5.227452545034382),
            Block.box(4.61388, 14, 4.4377200000000006, 7.163880000000001, 15, 5.4377200000000006),
            Block.box(9.098779926862342, 14, 2.683215763259872, 10.098779926862342, 15, 5.233215763259871),
            Block.box(5.652176782153997, 14, 4.977452545034382, 7.902176782153997, 15, 5.977452545034382)
    );

    private static final VoxelShape SHAPE_E_LOWER = Shapes.or(
                    Block.box(2, 0, 0.5, 14, 14, 3.5),
            Block.box(2, 0, 12.5, 14, 14, 15.5),
            Block.box(3, 7, 3.5, 3, 14, 12.5),
            Block.box(13, 7, 3.5, 13, 14, 12.5),
            Block.box(-0.5, 13, -0.5, 16.5, 15.5, 16.5),
            Block.box(0.5, 13, -0.5, 0.5, 15.5, 16.5),
            Block.box(15.5, 13, -0.5, 15.5, 15.5, 16.5),
            Block.box(-0.5, 13, 15.5, 16.5, 15.5, 15.5),
            Block.box(-0.5, 13, 0.5, 16.5, 15.5, 0.5),
            Block.box(0.5, 13.6, 0.5, 16.4, 14.6, 15.5),
            Block.box(7.718218611069101, 14.6, 11.443950196844227, 10.718218611069101, 17.6, 12.943950196844227),
            Block.box(9.718218611069101, 15.6, 11.443950196844227, 9.718218611069101, 16.6, 12.943950196844227),
            Block.box(8.718218611069101, 15.6, 11.443950196844227, 8.718218611069101, 16.6, 12.943950196844227),
            Block.box(8.718218611069101, 15.6, 11.443950196844227, 9.718218611069101, 15.6, 12.943950196844227),
            Block.box(8.718218611069101, 16.6, 11.443950196844227, 9.718218611069101, 16.6, 12.943950196844227),
            Block.box(5.718218611069101, 14.61, 11.443950196844227, 7.718218611069101, 14.61, 12.943950196844227),
            Block.box(7.770286636163236, 0.005849999999999911, 11.335906984722108, 8.770286636163236, 1.60585, 12.93590698472211),
            Block.box(7.220286636163236, 0.10585, 11.43590698472211, 8.670286636163237, 1.50585, 12.835906984722108),
            Block.box(5.370286636163236, 0.10585, 11.43590698472211, 6.820286636163235, 1.50585, 12.835906984722108),
            Block.box(5.470286636163236, 0.30584999999999996, 11.635906984722109, 8.570286636163235, 1.30585, 12.635906984722109),
            Block.box(11.88726386168154, 3.3058500000000035, 5.826258260831061, 14.487263861681537, 4.805850000000004, 8.42625826083106),
            Block.box(12.687263861681538, 3.1558500000000036, 4.951258260831061, 13.68726386168154, 4.405850000000004, 6.201258260831061),
            Block.box(10.687263861681538, 1.1558500000000036, 4.87625826083106, 15.68726386168154, 3.1558500000000036, 9.62625826083106),
            Block.box(12.687263861681538, -0.0941499999999964, 4.976258260831061, 13.68726386168154, 1.1558500000000036, 6.226258260831061),
            Block.box(11.687263861681538, 0.0058500000000035746, 5.62625826083106, 14.68726386168154, 1.0058500000000035, 8.62625826083106),
            Block.box(10.937263861681538, 0.1558500000000036, 4.87625826083106, 15.43726386168154, 4.155850000000004, 9.37625826083106),
            Block.box(5.022456914785511, 0.14999999999999902, 5.02419171936457, 11.022456914785511, 1.899999999999999, 6.77419171936457),
            Block.box(6.397456914785511, 0.024999999999999023, 4.89919171936457, 7.397456914785511, 2.024999999999999, 6.89919171936457),
            Block.box(7.522456914785511, 0.024999999999999023, 4.89919171936457, 8.772456914785511, 2.024999999999999, 6.89919171936457),
            Block.box(9.897456914785511, 0.024999999999999023, 4.89919171936457, 11.147456914785511, 2.024999999999999, 6.89919171936457),
            Block.box(9.022547454965618, 14.1, 2.1521767821539974, 10.272547454965618, 15.1, 4.402176782153997),
            Block.box(10.772547454965618, 14.1, 2.1521767821539974, 12.022547454965618, 15.1, 4.402176782153997),
            Block.box(10.56228, 14, 4.61388, 11.56228, 15, 7.163880000000001),
            Block.box(10.76678423674013, 14, 9.098779926862342, 13.316784236740128, 15, 10.098779926862342),
            Block.box(10.022547454965618, 14, 5.652176782153997, 11.022547454965618, 15, 7.902176782153997)
    );

    private static final VoxelShape SHAPE_W_LOWER = Shapes.or(
                    Block.box(2, 0, 12.5, 14, 14, 15.5),
            Block.box(2, 0, 0.5, 14, 14, 3.5),
            Block.box(13, 7, 3.5, 13, 14, 12.5),
            Block.box(3, 7, 3.5, 3, 14, 12.5),
            Block.box(-0.5, 13, -0.5, 16.5, 15.5, 16.5),
            Block.box(15.5, 13, -0.5, 15.5, 15.5, 16.5),
            Block.box(0.5, 13, -0.5, 0.5, 15.5, 16.5),
            Block.box(-0.5, 13, 0.5, 16.5, 15.5, 0.5),
            Block.box(-0.5, 13, 15.5, 16.5, 15.5, 15.5),
            Block.box(-0.3999999999999986, 13.6, 0.5, 15.5, 14.6, 15.5),
            Block.box(5.281781388930899, 14.6, 3.056049803155773, 8.281781388930899, 17.6, 4.556049803155773),
            Block.box(6.281781388930899, 15.6, 3.056049803155773, 6.281781388930899, 16.6, 4.556049803155773),
            Block.box(7.281781388930899, 15.6, 3.056049803155773, 7.281781388930899, 16.6, 4.556049803155773),
            Block.box(6.281781388930899, 15.6, 3.056049803155773, 7.281781388930899, 15.6, 4.556049803155773),
            Block.box(6.281781388930899, 16.6, 3.056049803155773, 7.281781388930899, 16.6, 4.556049803155773),
            Block.box(8.281781388930899, 14.61, 3.056049803155773, 10.281781388930899, 14.61, 4.556049803155773),
            Block.box(7.229713363836764, 0.005849999999999911, 3.0640930152778916, 8.229713363836764, 1.60585, 4.664093015277891),
            Block.box(7.329713363836763, 0.10585, 3.164093015277891, 8.779713363836764, 1.50585, 4.564093015277892),
            Block.box(9.179713363836765, 0.10585, 3.164093015277891, 10.629713363836764, 1.50585, 4.564093015277892),
            Block.box(7.429713363836765, 0.30584999999999996, 3.3640930152778905, 10.529713363836764, 1.30585, 4.3640930152778905),
            Block.box(1.5127361383184628, 3.3058500000000035, 7.5737417391689394, 4.112736138318461, 4.805850000000004, 10.173741739168939),
            Block.box(2.31273613831846, 3.1558500000000036, 9.798741739168939, 3.3127361383184617, 4.405850000000004, 11.048741739168939),
            Block.box(0.3127361383184599, 1.1558500000000036, 6.37374173916894, 5.312736138318462, 3.1558500000000036, 11.12374173916894),
            Block.box(2.31273613831846, -0.0941499999999964, 9.773741739168939, 3.3127361383184617, 1.1558500000000036, 11.023741739168939),
            Block.box(1.31273613831846, 0.0058500000000035746, 7.37374173916894, 4.312736138318462, 1.0058500000000035, 10.37374173916894),
            Block.box(0.5627361383184599, 0.1558500000000036, 6.62374173916894, 5.062736138318462, 4.155850000000004, 11.12374173916894),
            Block.box(4.977543085214489, 0.14999999999999902, 9.22580828063543, 10.977543085214489, 1.899999999999999, 10.97580828063543),
            Block.box(8.602543085214489, 0.024999999999999023, 9.10080828063543, 9.602543085214489, 2.024999999999999, 11.10080828063543),
            Block.box(7.227543085214489, 0.024999999999999023, 9.10080828063543, 8.477543085214489, 2.024999999999999, 11.10080828063543),
            Block.box(4.852543085214489, 0.024999999999999023, 9.10080828063543, 6.102543085214489, 2.024999999999999, 11.10080828063543),
            Block.box(5.727452545034382, 14.1, 11.597823217846003, 6.977452545034382, 15.1, 13.847823217846003),
            Block.box(3.9774525450343816, 14.1, 11.597823217846003, 5.227452545034382, 15.1, 13.847823217846003),
            Block.box(4.4377200000000006, 14, 8.83612, 5.4377200000000006, 15, 11.38612),
            Block.box(2.683215763259872, 14, 5.901220073137659, 5.233215763259871, 15, 6.901220073137659),
            Block.box(4.977452545034382, 14, 8.097823217846003, 5.977452545034382, 15, 10.347823217846003)
    );



    private static final VoxelShape SHAPE_S_LOWER = Shapes.or(
                    Block.box(12.5, 0, 2, 15.5, 14, 14),
            Block.box(0.5, 0, 2, 3.5, 14, 14),
            Block.box(3.5, 7, 3, 12.5, 14, 3),
            Block.box(3.5, 7, 13, 12.5, 14, 13),
            Block.box(-0.5, 13, -0.5, 16.5, 15.5, 16.5),
            Block.box(-0.5, 13, 0.5, 16.5, 15.5, 0.5),
            Block.box(-0.5, 13, 15.5, 16.5, 15.5, 15.5),
            Block.box(0.5, 13, -0.5, 0.5, 15.5, 16.5),
            Block.box(15.5, 13, -0.5, 15.5, 15.5, 16.5),
            Block.box(0.5, 13.6, 0.5, 15.5, 14.6, 16.4),
            Block.box(3, 14.6, 9, 4.5, 17.6, 12),
            Block.box(3, 15.6, 11, 4.5, 16.6, 11),
            Block.box(3, 15.6, 10, 4.5, 16.6, 10),
            Block.box(3, 15.6, 10, 4.5, 15.6, 11),
            Block.box(3, 16.6, 10, 4.5, 16.6, 11),
            Block.box(3, 14.61, 7, 4.5, 14.61, 9),
            Block.box(9.45437, 0.00585, 3.67722, 11.05437, 1.60585, 4.67722),
            Block.box(9.55437, 0.10585, 3.12722, 10.95437, 1.50585, 4.57722),
            Block.box(9.55437, 0.10585, 1.27722, 10.95437, 1.50585, 2.72722),
            Block.box(9.75437, 0.30585, 1.37722, 10.75437, 1.30585, 4.47722),
            Block.box(9.79415, 3.30585, 14.70813, 12.39415, 4.80585, 17.30813),
            Block.box(12.01915, 3.15585, 15.50813, 13.26915, 4.40585, 16.50813),
            Block.box(8.59415, 1.15585, 13.50813, 13.34415, 3.15585, 18.50813),
            Block.box(11.99415, -0.09415, 15.50813, 13.24415, 1.15585, 16.50813),
            Block.box(9.59415, 0.00585, 14.50813, 12.59415, 1.00585, 17.50813),
            Block.box(8.84415, 0.15585, 13.75813, 13.34415, 4.15585, 18.25813),
            Block.box(10.375, 0.15, 4.5, 12.125, 1.9, 10.5),
            Block.box(10.25, 0.025, 5.875, 12.25, 2.025, 6.875),
            Block.box(10.25, 0.025, 7, 12.25, 2.025, 8.25),
            Block.box(10.25, 0.025, 9.375, 12.25, 2.025, 10.625),
            Block.box(10.375, 14.1, 10.125, 12.625, 15.1, 11.375),
            Block.box(10.375, 14.1, 11.875, 12.625, 15.1, 13.125),
            Block.box(8.83612, 14, 10.56228, 11.38612, 15, 11.56228),
            Block.box(9.09707, 14, 10.30132, 10.09707, 15, 12.85132),
            Block.box(6.875, 14, 11.125, 9.125, 15, 12.125)
    );

    public EquipmentTableBlock(Properties properties) {
        super(properties);
    }
    public static final EnumProperty<DoubleBlockHalf> HALF = BlockStateProperties.DOUBLE_BLOCK_HALF;
    public static final DirectionProperty FACING = HorizontalDirectionalBlock.FACING;

    @Override
    public InteractionResult use(BlockState pState, Level pLevel, BlockPos pPos, Player pPlayer, InteractionHand pHand, BlockHitResult pHit) {

        pLevel.playSound(pPlayer,pPos, ModSounds.LLOYD_INTERACTION.get(), SoundSource.BLOCKS,1,1);

        if (!pLevel.isClientSide()) {

            BlockEntity entity = pLevel.getBlockEntity(pPos);
            BlockEntity entityBelow = pLevel.getBlockEntity(pPos.below());

            if(entity instanceof EquipmentTableTile) {

                if(pState.getValue(HALF) == DoubleBlockHalf.UPPER)
                {
                    NetworkHooks.openGui(((ServerPlayer) pPlayer), (EquipmentTableTile) entityBelow, pPos.below());
                }
                else
                {
                    NetworkHooks.openGui(((ServerPlayer) pPlayer), (EquipmentTableTile) entity, pPos);
                }

            } else {
                throw new IllegalStateException("Our Container provider is missing!");
            }
        }

        return InteractionResult.sidedSuccess(pLevel.isClientSide());
    }


    @Override
    public VoxelShape getShape(BlockState state, BlockGetter p_60556_, BlockPos p_60557_, CollisionContext p_60558_) {
        switch (state.getValue(FACING))
        {
            case NORTH:
                return state.getValue(HALF) == DoubleBlockHalf.UPPER ? SHAPE_N_UPPER : SHAPE_N_LOWER;

            case EAST:
                return state.getValue(HALF) == DoubleBlockHalf.UPPER ? SHAPE_E_UPPER : SHAPE_E_LOWER;

            case WEST:
                return state.getValue(HALF) == DoubleBlockHalf.UPPER ? SHAPE_W_UPPER : SHAPE_W_LOWER;

            case SOUTH:
                return state.getValue(HALF) == DoubleBlockHalf.UPPER ? SHAPE_S_UPPER : SHAPE_S_LOWER;

            default:
                return Shapes.block();
        }
    }

    public BlockState updateShape(BlockState pState, Direction pFacing, BlockState pFacingState, LevelAccessor pLevel, BlockPos pCurrentPos, BlockPos pFacingPos) {
        DoubleBlockHalf doubleblockhalf = pState.getValue(HALF);
        if (pFacing.getAxis() == Direction.Axis.Y && doubleblockhalf == DoubleBlockHalf.LOWER == (pFacing == Direction.UP)) {
            return pFacingState.is(this) && pFacingState.getValue(HALF) != doubleblockhalf ? pState.setValue(FACING, pFacingState.getValue(FACING)) : Blocks.AIR.defaultBlockState();
        } else {
            return doubleblockhalf == DoubleBlockHalf.LOWER && pFacing == Direction.DOWN && !pState.canSurvive(pLevel, pCurrentPos) ? Blocks.AIR.defaultBlockState() : super.updateShape(pState, pFacing, pFacingState, pLevel, pCurrentPos, pFacingPos);
        }
    }

    @Override
    public void playerWillDestroy(Level pLevel, BlockPos pPos, BlockState pState, Player pPlayer) {
        if (!pLevel.isClientSide && pPlayer.isCreative()) {
            preventCreativeDropFromBottomPart(pLevel, pPos, pState, pPlayer);

        }

        super.playerWillDestroy(pLevel, pPos, pState, pPlayer);
    }

    public static void preventCreativeDropFromBottomPart(Level pLevel, BlockPos pPos, BlockState pState, Player pPlayer) {
        DoubleBlockHalf doubleblockhalf = pState.getValue(HALF);
        if (doubleblockhalf == DoubleBlockHalf.UPPER) {
            BlockPos blockpos = pPos.below();
            BlockState blockstate = pLevel.getBlockState(blockpos);
            if (blockstate.is(pState.getBlock()) && blockstate.getValue(HALF) == DoubleBlockHalf.LOWER) {
                BlockState blockstate1 = blockstate.hasProperty(BlockStateProperties.WATERLOGGED) && blockstate.getValue(BlockStateProperties.WATERLOGGED) ? Blocks.WATER.defaultBlockState() : Blocks.AIR.defaultBlockState();
                pLevel.setBlock(blockpos, blockstate1, 35);
                pLevel.levelEvent(pPlayer, 2001, blockpos, Block.getId(blockstate));
            }
        }

    }

    @javax.annotation.Nullable
    public BlockState getStateForPlacement(BlockPlaceContext pContext) {
        BlockPos blockpos = pContext.getClickedPos();
        Level level = pContext.getLevel();
        if (blockpos.getY() < level.getMaxBuildHeight() - 1 && level.getBlockState(blockpos.above()).canBeReplaced(pContext)) {
            boolean flag = level.hasNeighborSignal(blockpos) || level.hasNeighborSignal(blockpos.above());
            return this.defaultBlockState().setValue(FACING, pContext.getHorizontalDirection()).setValue(HALF, DoubleBlockHalf.LOWER);
        } else {
            return null;
        }
    }

    public void setPlacedBy(Level pLevel, BlockPos pPos, BlockState pState, LivingEntity pPlacer, ItemStack pStack) {
        pLevel.setBlock(pPos.above(), pState.setValue(HALF, DoubleBlockHalf.UPPER), 3);
    }


    public boolean canSurvive(BlockState pState, LevelReader pLevel, BlockPos pPos) {
        BlockPos blockpos = pPos.below();
        BlockState blockstate = pLevel.getBlockState(blockpos);
        return pState.getValue(HALF) == DoubleBlockHalf.LOWER ? blockstate.isFaceSturdy(pLevel, blockpos, Direction.UP) : blockstate.is(this);
    }

        @Override
    public RenderShape getRenderShape(BlockState pState) {
        return RenderShape.MODEL;
    }

    public PushReaction getPistonPushReaction(BlockState pState) {
        return PushReaction.DESTROY;
    }



    public BlockState rotate(BlockState pState, Rotation pRotation) {
        return pState.setValue(FACING, pRotation.rotate(pState.getValue(FACING)));
    }

    public BlockState mirror(BlockState pState, Mirror pMirror) {
        return pMirror == Mirror.NONE ? pState : pState.rotate(pMirror.getRotation(pState.getValue(FACING)));
    }

    /**
     * Return a random long to be passed to {@link net.minecraft.client.resources.model.BakedModel#getQuads}, used for
     * random model rotations
     */
    public long getSeed(BlockState pState, BlockPos pPos) {
        return Mth.getSeed(pPos.getX(), pPos.below(pState.getValue(HALF) == DoubleBlockHalf.LOWER ? 0 : 1).getY(), pPos.getZ());
    }

    //If the block is destroyed, al items inside drops
    @Override
    public void onRemove(BlockState pState, Level pLevel, BlockPos pPos, BlockState pNewState, boolean pIsMoving) {
        if (pState.getBlock() != pNewState.getBlock()) {
            BlockEntity blockEntity = pLevel.getBlockEntity(pPos);
            if (blockEntity instanceof EquipmentTableTile) {
                ((EquipmentTableTile) blockEntity).drops();
            }
        }
        super.onRemove(pState,pLevel,pPos,pNewState,pIsMoving);
    }

    @Nullable
    @Override
    public BlockEntity newBlockEntity(BlockPos pPos, BlockState pState) {
        return new EquipmentTableTile(pPos,pState);
    }


    @Nullable
    @Override
    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level pLevel, BlockState pState, BlockEntityType<T> pBlockEntityType)
    {
        {
            if (pLevel.isClientSide()) {
                return null;
            }
            return (lvl, pos, blockState, t) -> {
                if (t instanceof EquipmentTableTile BE) {
                    BE.tick(pLevel, pos, blockState, BE);
                }
            };
        }
    }

    @Override
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> pBuilder) {
        pBuilder.add(HALF, FACING);
    }
}
